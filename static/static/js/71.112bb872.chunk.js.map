{"version":3,"sources":["components/transporter/AssignDriverSubForm.js"],"names":["React","memo","props","anchor","useState","placeHolder","error","color","driverNameState","setDriverNameState","driverContactNoState","setDriverContactNoState","job","viewPopup","setViewPopup","classes","makeStyles","list","width","fullList","useStyles","style","height","item","xs","fontSize","textDecoration","href","onClick","noOfContainers","consigneeName","placeholder","onFocus","e","target","value","length","onBlur","driverName","onDriverDetailsEntered","InputProps","fontStyle","driverContactNo","colSpan","container","alignItems","marginTop","marginRight","src","border","marginBottom","align","className","marginLeft","vehicleRegNo","vehicleType","open","onClose","onOpen","clsx","size","elevation","borderBottom","requestContainerList","map","ind","variant","container_number","iso_code"],"mappings":"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","file":"static/js/71.112bb872.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Grid,\r\n  TextField,\r\n  TableHead,\r\n  Paper\r\n\r\n} from \"@material-ui/core\";\r\n\r\nimport { Card } from \"@material-ui/core/\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport { InputLabel } from \"@material-ui/core\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles,withStyles} from \"@material-ui/core/styles\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport MuiTableCell from \"@material-ui/core/TableCell\";\r\n\r\nfunction AssignDriverSubForm(props) {\r\n  const [driverNameState,setDriverNameState]=useState({ placeHolder: \"Enter driver name here\", error: false,color:'grey' })\r\n  const [driverContactNoState,setDriverContactNoState]=useState({ placeHolder: \"Enter driver number here\", error: false,color:'grey' })\r\n  const [job,setJob]=useState(props.job);\r\n  const [viewPopup, setViewPopup] = useState(false);\r\n\r\n  const useStyles = makeStyles({\r\n\r\n    list: {\r\n      width: 350,\r\n    },\r\n    fullList: {\r\n      width: \"auto\",\r\n    },\r\n  });\r\n\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n  const list = (anchor) => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === \"top\" || anchor === \"bottom\",\r\n      })}\r\n    >\r\n      <br></br>\r\n      <InputLabel\r\n        style={{ fontSize: \"20px\", color: \"grey\", marginLeft: \"15px\" }}\r\n      >\r\n        {\" \"}\r\n        Container Details\r\n      </InputLabel>\r\n      <br></br>borderBottom:\"none\" ,width:185\r\n      <Divider></Divider>\r\n      <br></br>\r\n      <Table size=\"small\"  style={{ width: \"320px\", marginLeft: \"12px\" }}>\r\n        <TableHead>\r\n          <Paper elevation={0} style={{ marginTop: \"5px\" }}>\r\n            <TableRow>\r\n              <TableCell style={{ fontSize: \"13px\", color: \"grey\",}}>\r\n                Container Number\r\n              </TableCell>\r\n              <TableCell style={{ fontSize: \"13px\", color: \"grey\", borderBottom:\"none\" ,width:185}}>\r\n                ISO Code\r\n              </TableCell>\r\n            </TableRow>\r\n          </Paper>\r\n        </TableHead>\r\n        <TableBody>\r\n          {job.requestContainerList.map((container, ind) => (\r\n            <TableRow>\r\n              <Paper variant=\"outlined\" style={{ marginTop: \"5px\" }}>\r\n                <TableCell style={{ fontSize: \"13px\", color: \"grey\",borderBottom:\"none\" ,width:185 }}>\r\n                  {container.container_number}\r\n                </TableCell>\r\n                <TableCell style={{ fontSize: \"13px\", color: \"black\",borderBottom:\"none\" ,width:185 }}>\r\n                  {container.iso_code}\r\n                </TableCell>\r\n              </Paper>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n\r\n\r\n    return(\r\n        <>\r\n          <Card style={{ width: \"1010px\", height: \"200px\" }}>\r\n        <Table>\r\n          <TableBody >\r\n            <TableRow>\r\n              <TableCell>\r\n                <Grid item xs={5}>\r\n                  <InputLabel style={{ fontSize: \"13px\", color: \"grey\" }}>\r\n                    Number of Containers\r\n                  </InputLabel>\r\n                </Grid>\r\n                <Grid item xs={5}>\r\n                <Link\r\n                        style={{ color: \"red\", textDecoration: \"underline\" }}\r\n                        href=\"#\"\r\n                        onClick={() => {\r\n                          setViewPopup(true);\r\n                        }}\r\n                      >\r\n                        {job.noOfContainers}\r\n                      </Link>\r\n                </Grid>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Grid item xs={5}>\r\n                  <InputLabel style={{ fontSize: \"13px\", color: \"grey\" }}>\r\n                    Consignee name\r\n                  </InputLabel>\r\n                </Grid>\r\n                <Grid item xs={7}>\r\n                  <InputLabel style={{ fontSize: \"13px\", color: \"black\" }} />\r\n                  {job.consigneeName}\r\n                </Grid>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Grid item xs={5}>\r\n                  <InputLabel style={{ fontSize: \"13px\", color: \"grey\" }}>\r\n                    Contact Name\r\n                  </InputLabel>\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                <TextField  placeholder={driverNameState.placeHolder}\r\n                 error={driverNameState.error}\r\n                 onFocus={(e) => {\r\n                   if(e.target.value.length===0)       \r\n                    setDriverNameState({ placeHolder: \"Enter driver name here\", error: true,color:'red' });  \r\n                   else\r\n                   setDriverNameState({ placeHolder: \"\", error: false,color:'black' });\r\n                 \r\n                 }}\r\n                 onBlur={(e) => {\r\n                  if(e.target.value.length!==0)       \r\n                  setDriverNameState({ placeHolder: \"\", error: false,color:'black' });\r\n                  job.driverName=e.target.value;\r\n                  props.onDriverDetailsEntered(job);\r\n                }}\r\n\r\n                 InputProps={{\r\n                  style: {\r\n                    color: driverNameState.color,\r\n                    fontStyle:'italic',\r\n                    fontSize:'13px'\r\n                  } \r\n                }}\r\n                \r\n                />\r\n                </Grid>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Grid item xs={5}>\r\n                  <InputLabel style={{ fontSize: \"13px\", color: \"grey\" }}>\r\n                    Contact Number\r\n                  </InputLabel>\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                <TextField placeholder={driverContactNoState.placeHolder}\r\n                 error={driverContactNoState.error}\r\n                 onFocus={(e) => {\r\n                   if(e.target.value.length===0)       \r\n                   setDriverContactNoState({ placeHolder: \"Enter driver number here\", error: true,color:'red' });  \r\n                   else\r\n                   setDriverContactNoState({ placeHolder: \"\", error: false,color:'black' });\r\n                   \r\n                 }}\r\n\r\n                 onBlur={(e) => {\r\n                  if(e.target.value.length!==0)       \r\n                  setDriverContactNoState({ placeHolder: \"\", error: false,color:'black' });\r\n                  job.driverContactNo=e.target.value;\r\n                  props.onDriverDetailsEntered(job);\r\n                }}\r\n\r\n\r\n                 InputProps={{\r\n                  style: {\r\n                    color: setDriverContactNoState.color,\r\n                    fontStyle:'italic',\r\n                    fontSize:'13px'\r\n                  } \r\n                }}></TextField>\r\n                </Grid>\r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow >\r\n              <TableCell> </TableCell>\r\n              <TableCell colSpan={4}>\r\n\r\n              <Grid container  alignItems=\"flex-start\"> \r\n                              <Grid item  style={{marginTop:\"30px\",marginRight:\"-6px\"}}>\r\n                              <img src=\"../truck.svg\"  />\r\n                            </Grid>\r\n                              <Grid item > \r\n                              <Box\r\n                      style={{\r\n                        border: \"2px dashed #ccc\",\r\n                        height: \"90px\",\r\n                        width: \"500px\",\r\n                        marginBottom: \"25px\",\r\n                        align: \"center\",\r\n                      }}\r\n                    >\r\n                      <div className=\"row\">\r\n                        <Box\r\n                          style={{\r\n                            height: \"30px\",\r\n                            width: \"200px\",\r\n                            border: \"2px solid #ccc\",\r\n                            marginTop: \"30px\",\r\n                            marginLeft: \"30px\",\r\n                          }}\r\n                        >\r\n                         {job.vehicleRegNo}\r\n                        </Box>\r\n                        <Box\r\n                          style={{\r\n                            height: \"30px\",\r\n                            width: \"200px\",\r\n                            border: \"2px solid #ccc\",\r\n                            marginTop: \"30px\",\r\n                            marginLeft: \"30px\",\r\n                          }}\r\n                        >\r\n                          {job.vehicleType}\r\n                        </Box>\r\n                      </div>\r\n                     \r\n                    </Box>\r\n                              </Grid>\r\n                             </Grid>\r\n            \r\n                  \r\n                   \r\n                   \r\n         \r\n              \r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </Card>\r\n      <br></br>\r\n\r\n      <SwipeableDrawer\r\n        anchor=\"right\"\r\n        open={viewPopup}\r\n        onClose={() => {\r\n          setViewPopup(false);\r\n        }}\r\n        onOpen={() => {\r\n          setViewPopup(true);\r\n        }}\r\n      >\r\n        {list()}\r\n      </SwipeableDrawer>\r\n        </>\r\n    )\r\n\r\n\r\n\r\n}\r\nexport default React.memo(AssignDriverSubForm);\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}