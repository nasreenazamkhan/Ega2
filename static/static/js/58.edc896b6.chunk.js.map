{"version":3,"sources":["lib/components/messagebar/messagebar.js","lib/components/formContainer/formContainer.js","lib/components/select/ApplnSelectBox.tsx","service/CommonService.js","lib/components/radio/appRadio.tsx","components/request/SaveRequest.js"],"names":["React","memo","mb","useSelector","state","messagebar","dispatch","useDispatch","MessageContainer","msgClass","icon","className","Icon","messages","map","e","i","key","onClick","hideMessageBar","console","log","show","messageType","SUCCESS","ERROR","INFO","WARNING","getMessageBar","props","Card","CardHeader","title","CardContent","children","makeStyles","theme","button","multiple","options","name","required","label","methods","placeholder","helperText","fieldAction","useFormContext","errors","setValue","getValues","register","control","useEffect","value","useRef","fullWidth","message","as","error","onChange","target","trigger","option","postToExternalSite","dataToPost","url","form","window","document","createElement","setAttribute","dataArr","Object","keys","length","appendChild","createHiddenElement","body","submit","hiddenField","downloadReceipt","referenceNumber","remoteUrl","endpointContants","open","field","meta","touched","FormLabel","component","RadioGroup","aria-label","id","row","FormControlLabel","Radio","SaveRequest","useForm","mode","reValidateMode","defaultValues","handleSubmit","reset","useState","pstate","setPstate","statusOpts","compMouted","masterVals","setMasterVals","prevstate","autoComplete","onSubmit","data","formData","consigneeCode","containerList","container_number","iso_code","requestBoeNumber","dpwTransactionId","consigneeName","consigneeNumber","zoneTariffCode","consigneeEmail","dropAddress","dropTime","dropInterval","refVehicleTypeCode","noOfVehicle","paymentType","obj","remoteBaseUrl","postHttp","then","res","dataVal","serviceOwnerID","dataItems","serviceID","serviceChannel","licenseKey","customerReferenceNumber","serviceDescription","responseURL","serviceCost","soTransactionID","documentationCharges","signature","popup","buEncryptionMode","CommonService","gatewayUrl","serviceOwnerId","serviceId","custRefNo","reqDescription","responseUrl","soReqId","customerTokenId","rosoomPaymentAuthorisationUrl","ApplnSelectBox","text","type"],"mappings":"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","file":"static/js/58.edc896b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { ms } from 'date-fns/locale';\r\nimport { SUCCESS, ERROR, INFO, WARNING } from '../../redux/messagebar/messagebarType';\r\nimport './messagebar.css';\r\nimport { Icon } from '@material-ui/core';\r\nimport { hideMessageBar } from '../../redux';\r\n\r\nfunction Messagebar() {\r\n    const mb = useSelector(state => state.messagebar);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n    const MessageContainer = ({ msgClass, icon }) => {\r\n        return (\r\n            <>\r\n                <div className={msgClass}>\r\n                    <div className=\"message-icon\"><Icon>{icon}</Icon></div>\r\n\r\n                    <div className=\"message-list\">\r\n                        <ul>{\r\n                            mb.messages.map((e, i) => {\r\n                                return <li key={i}>{e}</li>\r\n                            })\r\n                        }</ul>\r\n                    </div>\r\n                    <div className=\"close-icon\" onClick={() => {\r\n                        dispatch(hideMessageBar())\r\n                    }}>\r\n                        <Icon>clear</Icon>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    const getWarningMessage = () => {\r\n        return (\r\n            <>\r\n                <MessageContainer msgClass='alert-message-box bg-warning' icon='warning' />\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getInfoMessage = () => {\r\n        return (\r\n            <>\r\n                <MessageContainer msgClass='alert-message-box bg-info' icon='info' />\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getErrorMessage = () => {\r\n        return (\r\n            <>\r\n                <MessageContainer msgClass='alert-message-box bg-error' icon='error' />\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getSuccessMessage = () => {\r\n        return (\r\n            <>\r\n                <MessageContainer msgClass='alert-message-box bg-success' icon='check' />\r\n            </>)\r\n    }\r\n\r\n    const getMessageBar = () => {\r\n        console.log('IN componenet');\r\n        switch (mb.messageType) {\r\n            case SUCCESS: return getSuccessMessage();\r\n            case ERROR: return getErrorMessage();\r\n            case INFO: return getInfoMessage();\r\n            case WARNING: return getWarningMessage();\r\n            default:\r\n                return <></>;\r\n        }\r\n\r\n    }\r\n    console.log(mb);\r\n    return (\r\n        <>\r\n            {mb.show && mb.show === true && getMessageBar()}\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default React.memo(Messagebar);\r\n","import React from 'react'\r\nimport { Card, CardHeader, CardContent } from '@material-ui/core';\r\nimport './formContainer.css';\r\nimport Messagebar from '../messagebar/messagebar';\r\nfunction FormContainer(props) {\r\n    return (\r\n        <>\r\n            <Card>\r\n                <CardHeader title={props.title} className=\"page-header\" />\r\n                <CardContent>\r\n                    <Messagebar />\r\n                    {props.children}\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(FormContainer);\r\n","import {\r\n  FormControl,\r\n  FormHelperText,\r\n  InputLabel,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect } from \"react\";\r\nimport { ElementInputProps, LabelValue } from \"../../common/ElementInputProps\";\r\nimport { useFormContext, Controller } from \"react-hook-form\";\r\n\r\ntype MySelectFieldProps = {\r\n  options: LabelValue[];\r\n  multiple?: boolean;\r\n} & ElementInputProps;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {},\r\n}));\r\n\r\nconst ApplnSelectBox: React.FC<MySelectFieldProps> = ({\r\n  multiple,\r\n  options,\r\n  required = false,\r\n  name,\r\n  label,\r\n  placeholder,\r\n  helperText,\r\n  fieldAction,\r\n}) => {\r\n  const methods = useFormContext();\r\n  const { errors, getValues, setValue, register, control } = methods;\r\n\r\n  useEffect(() => {\r\n    register({ name: name, value: \"-1\" });\r\n  }, [register]);\r\n  const renders = React.useRef(0);\r\n  return (\r\n    <>\r\n      <FormControl fullWidth>\r\n        <InputLabel className={errors[name]?.message ? \"error-label\" : null}>\r\n          {label}\r\n        </InputLabel>\r\n        <Controller\r\n          control={control}\r\n          name={name}\r\n          as={\r\n            <Select\r\n              error={errors[name]?.message ? true : false}\r\n              onChange={(e: any) => {\r\n                setValue(name, e.target.value);\r\n                methods.trigger(name);\r\n                //   fieldAction(\"select\", e);\r\n              }}\r\n            >\r\n              {options.map((option, i) => {\r\n                return (\r\n                  <MenuItem value={option.value} key={i}>\r\n                    {option.label}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n          }\r\n        ></Controller>\r\n        <FormHelperText\r\n          className={errors[name]?.message ? \"error-label\" : null}\r\n        >\r\n          {errors[name]?.message}\r\n        </FormHelperText>\r\n      </FormControl>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(ApplnSelectBox);\r\n","import React from 'react';\r\nimport * as endpointContants from '../utils/ptmsEndpoints';\r\nimport { getHttp } from '../lib/common/HttpService';\r\n\r\nclass CommonService{\r\n\r\n   postToExternalSite=(dataToPost, url)=>{\r\n       console.log(\"dataToPost ::\",dataToPost);\r\n        const form = window.document.createElement('form');\r\n        form.setAttribute('method', 'post');\r\n        form.setAttribute('action', url);\r\n        const dataArr = Object.keys(dataToPost);\r\n        for (let i = 0; i < dataArr.length; i++) {\r\n            form.appendChild(this.createHiddenElement(dataArr[i], dataToPost[dataArr[i]]));\r\n        }\r\n        window.document.body.appendChild(form);\r\n        form.submit();\r\n    }\r\n\r\n    createHiddenElement=(name, value)=> {\r\n        const hiddenField = document.createElement('input');\r\n        hiddenField.setAttribute('name', name);\r\n        hiddenField.setAttribute('value', value);\r\n        hiddenField.setAttribute('type', 'hidden');\r\n        return hiddenField;\r\n    }\r\n\r\n    downloadReceipt = (referenceNumber) => {\r\n        \r\n        const remoteUrl =`${endpointContants.downloadReceipt}`+\"/\"+`${referenceNumber}`;\r\n\r\n        console.log(\"remoteUrl::\",remoteUrl);\r\n      \r\n         let obj = { url: remoteUrl };\r\n \r\n \r\n         window.open(remoteUrl);\r\n    }\r\n}\r\n\r\nexport default new CommonService()","import { FormControlLabel, FormLabel, Radio, RadioGroup } from '@material-ui/core';\r\nimport { FastField, FieldAttributes, FieldProps } from \"formik\";\r\nimport React from 'react';\r\nimport { ElementInputProps, LabelValue } from '../../common/ElementInputProps';\r\n\r\n\r\ntype MyRadioProps =\r\n    {\r\n        selectedOption: string,\r\n        options: LabelValue[]\r\n    } & ElementInputProps & FieldAttributes<{}>;\r\n\r\n\r\nconst AppRadio: React.FC<MyRadioProps> = ({ options, required = false, name, label, helperText }) => {\r\n    return (\r\n        <>\r\n\r\n            <FastField name={name}>\r\n                {\r\n                    ({ form, field, meta }: FieldProps) => {\r\n\r\n                        let showError = false;\r\n                        if (meta.touched && meta.error) {\r\n                            showError = true;\r\n                            helperText = meta.error;\r\n                        }\r\n                        return (\r\n                            <>\r\n                                <FormLabel component=\"legend\">{label}</FormLabel>\r\n                                <RadioGroup aria-label=\"gender\" id={field.name}\r\n                                    {...field} row={true}>\r\n                                    {options.map((option, i) => {\r\n                                        return (\r\n                                            <FormControlLabel key={i} value={option.value}\r\n                                                control={<Radio />} label={option.label} />\r\n                                        );\r\n                                    })}\r\n                                </RadioGroup>\r\n\r\n                            </>\r\n                        )\r\n                    }\r\n                }\r\n            </FastField>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(AppRadio);","import React,{ useEffect,useState} from 'react';\r\nimport AppButton from '../../lib/components/buttons/appButton';\r\nimport { Formik, Form } from 'formik';\r\nimport FormContainer from '../../lib/components/formContainer/formContainer';\r\nimport { postHttp ,getHttp} from '../../lib/common/HttpService';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport CommonService from '../../service/CommonService';\r\nimport AppRadio from \"../../lib/components/radio/appRadio\";\r\nimport { FormProvider, useForm } from \"react-hook-form\";\r\nimport ApplnSelectBox from \"../../lib/components/select/ApplnSelectBox\";\r\n\r\nexport default function SaveRequest(props){\r\n\r\n    const methods = useForm({\r\n  //  resolver: yupResolver(schema),\r\n    mode: \"onChange\",\r\n    reValidateMode: \"onChange\",\r\n  defaultValues: \"\",\r\n  });\r\n\r\n const { handleSubmit,reset} = methods;\r\n\r\nlet remoteBaseUrl = \"/ptms/app/api/secure/\";\r\n\r\nconst paymentOptions = [{\"label\": \"Instant\", \"value\": \"Instant\"}, {\"label\": \"Hold\", \"value\": \"Hold\"}]\r\n\r\n \r\n\r\n \r\n\r\nconst [formvalues, setFormvalues] = useState(\"\");\r\nconst [pstate, setPstate] = useState(0);\r\n  const [masterVals, setMasterVals] = useState({\r\n    statusOpts: [],\r\n    compMouted: false,\r\n  });\r\n\r\nuseEffect(() => {\r\n    setMasterVals((prevstate) => ({\r\n      statusOpts: [\r\n        { label: \"\", value: \"-1\" },\r\n        { label: \"Instant\", value: \"Instant\" },\r\n        { label: \"Hold\", value: \"Hold\" },\r\n      ],\r\n      compMouted: true,\r\n    }));\r\n  }, []);\r\n\r\nconst onSubmit = (data) => {\r\n\r\n    const formData = {\r\nconsigneeCode : 'abc',\r\ncontainerList : [\r\n{ container_number:'c007', iso_code:'1000' ,requestBoeNumber:'r001',dpwTransactionId:'T-0000000225',consigneeName:'xyz', consigneeNumber:'c1',zoneTariffCode:'JEAJAFZAS',consigneeEmail:'abc@gmail.com',dropAddress:'sharjah',dropTime:'',dropInterval:'4AM-6AM'},\r\n{ container_number:'c008', iso_code:'1001' ,requestBoeNumber:'r002',dpwTransactionId:'T-0000000225',consigneeName:'xyzq', consigneeNumber:'c2',zoneTariffCode:'JEAJAFZAS',consigneeEmail:'abcs@gmail.com',dropAddress:'sharjah',dropTime:'',dropInterval:'4AM-6AM'}\r\n\r\n],\r\nrefVehicleTypeCode : '123',\r\nnoOfVehicle : 1,\r\npaymentType : ''\r\n }\r\n\r\n  console.log(\"Datta:::\",data);\r\n      formData.paymentType=   data.paymentType;   \r\n let finalURL = remoteBaseUrl + \"/requestDetails/saveRequestDetails\"\r\n\r\n                                                \r\n     let obj = {\r\n     url: finalURL,\r\n     body: formData\r\n     }; \r\n    postHttp(obj, true).then(res => {\r\n     console.log(\"save response ::\",res);\r\n  \r\n     setPstate(pstate + 1);\r\n     if(data.paymentType === 'Instant'){\r\n     const dataVal= {\r\n                serviceOwnerID: res.data.dataItems[0].serviceOwnerID,\r\n                serviceID: res.data.dataItems[0].serviceID,\r\n                serviceChannel: res.data.dataItems[0].serviceChannel,\r\n                licenseKey: res.data.dataItems[0].licenseKey,\r\n                customerReferenceNumber: res.data.dataItems[0].customerReferenceNumber,\r\n                serviceDescription: res.data.dataItems[0].serviceDescription,\r\n                responseURL: res.data.dataItems[0].responseURL,\r\n                serviceCost: res.data.dataItems[0].serviceCost,\r\n                soTransactionID: res.data.dataItems[0].soTransactionID,\r\n                documentationCharges: res.data.dataItems[0].documentationCharges,\r\n                signature: res.data.dataItems[0].signature,\r\n                popup: res.data.dataItems[0].popup,\r\n                buEncryptionMode: res.data.dataItems[0].buEncryptionMode,\r\n                \r\n              };\r\n              console.log(\"dataVal\",dataVal);\r\n    CommonService.postToExternalSite(dataVal,res.data.dataItems[0].gatewayUrl)\r\n     }\r\n     else if (data.paymentType==='Hold'){\r\n     const dataVal= {\r\n                serviceOwnerId: res.data.dataItems[0].serviceOwnerID,\r\n                serviceId: res.data.dataItems[0].serviceID,\r\n                serviceChannel: res.data.dataItems[0].serviceChannel,\r\n                licenseKey: res.data.dataItems[0].licenseKey,\r\n                custRefNo: res.data.dataItems[0].customerReferenceNumber,\r\n                reqDescription: res.data.dataItems[0].serviceDescription,\r\n                responseUrl: res.data.dataItems[0].responseURL,\r\n                serviceCost: res.data.dataItems[0].serviceCost,\r\n                soReqId: res.data.dataItems[0].soTransactionID,\r\n                signature: res.data.dataItems[0].signature,\r\n                popup: res.data.dataItems[0].popup,\r\n                customerTokenId: res.data.dataItems[0].customerTokenId\r\n              };\r\n              console.log(\"dataVal\",dataVal);\r\n    CommonService.postToExternalSite(dataVal,res.data.dataItems[0].rosoomPaymentAuthorisationUrl)\r\n     }\r\n    })\r\n    }\r\n        \r\n    return (\r\n        <>\r\n      {masterVals.compMouted &&(\r\n    <FormProvider {...methods}>\r\n     <FormContainer>\r\n     <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\r\n    <div className=\"row\">\r\n     <div className=\"col-md\">\r\n     <ApplnSelectBox label=\"Payment Type\" name=\"paymentType\"\r\n     helperText=\"Select Payment Type\"\r\n     options={masterVals.statusOpts}/>\r\n        </div>\r\n    <AppButton  text=\"Submit\"\r\n                 type=\"submit\">save</AppButton>\r\n    </div>\r\n      </form>\r\n    </FormContainer>\r\n    </FormProvider>\r\n   )\r\n     }\r\n     </>)\r\n}\r\n\r\n\r\n"],"sourceRoot":""}