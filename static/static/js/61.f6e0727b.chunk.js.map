{"version":3,"sources":["lib/components/toast/ErrorToast.js","lib/components/datepicker/appDatePicker.tsx","lib/components/datepicker/ApplnDatePicker.tsx","components/admin/JobCard.js"],"names":["ErrorToast","props","title","message","icon","position","showToast","className","style","marginTop","fontSize","type","onClick","data-dismiss","aria-label","aria-hidden","React","memo","useField","field","label","useRef","name","iconColor","defaultDate","compDate","useEffect","str","value","length","day","split","mon","yr","myDate","Date","form","setFieldValue","datestr","utils","DateFnsUtils","fullWidth","placeholder","variant","format","autoOk","onChange","val","console","log","getDate","year","getMonth","getFullYear","handleChange","margin","inputVariant","InputProps","endAdornment","fontFamily","InputLabelProps","KeyboardButtonProps","color","padding","methods","useFormContext","errors","setValue","getValues","control","register","useState","setCompdate","defaultValuesRef","current","as","size","error","helperText","trigger","disablePast","disablePastDate","fontStyle","setFromTime","setToTime","render","setRender","disable","setDisable","allowedFileTypes","showToaster1","setShowToaster1","showToaster2","setShowToaster2","useForm","mode","reValidateMode","defaultValues","validate","job","touched","count","requestContainerList","map","container","inx","tokenOut","undefined","tokenOutSlotFrom","tokenOutSlotTo","tokenOutDate","etokenDto","valid","disabled","cnt","disCnt","jobs","jb","textTransform","marginLeft","e","filter","obj","url","endpointContants","body","postHttp","then","response","reRender","catch","key","referenceNumber","width","height","textAlign","backgroundColor","border","onExpandClicked","open","item","xs","sm","spacing","consigneeName","vehicleRegNo","src","dropAddress","requestedBy","requesterContactName","requesterContactNumber","borderTop","borderBottom","container_number","boeNumber","requestDetailsNumber","pickupLocation","date_time","id","defaultValue","target","dateTime","shrink","inputProps","event","htmlFor","display","file","files","Promise","resolve","reject","reader","FileReader","onload","result","onerror","err","readAsDataURL","contentArr","fileType","replace","some","fileContent","tokenType","fileName","upload","elevation","borderRadius","minWidth","minHeight","direction"],"mappings":"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","file":"static/js/61.f6e0727b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport \"./ErrorToast.css\";\r\n\r\n\r\nconst ErrorToast = (props) => {\r\n  const { title,message, icon, position,showToast } = props;\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n    \r\n    \r\n     <div className={`notification-container ${position}`}>\r\n     \r\n        <div className=\"info-box\">\r\n        \r\n          <div className=\"icon bg-red\">\r\n            <i className=\"material-icons\">{icon}</i>\r\n          </div>\r\n          <div className=\"content\" >\r\n            <div className=\"title\">{title}</div>\r\n            <div className=\"message\">{message}</div>\r\n          </div>\r\n          <div className=\"col-md\">\r\n          <button style={{marginTop:\"5px\",fontSize:\"25px\"}} type=\"button\"    onClick={() => {\r\n                         showToast(false);\r\n                            \r\n                          }}    className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n        <span aria-hidden=\"true\"  >&times;</span>\r\n\r\n    </button>\r\n    </div>\r\n         \r\n        </div>\r\n        </div>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorToast;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { FieldAttributes, Field, FieldProps, useField, FastField, useFormikContext } from \"formik\";\r\nimport { ElementInputProps } from \"../../common/ElementInputProps\";\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\n\r\n\r\n\r\n\r\ntype MydateProps =\r\n    {\r\n\r\n    } & ElementInputProps & FieldAttributes<{}>;\r\n\r\ntype MyDateState = {\r\n    dpDate: Date;\r\n}\r\n\r\n\r\n\r\nconst AppDatePicker: React.FC<MydateProps> = (props) => {\r\n\r\n    const [field, meta, helpers] = useField<{}>(props);\r\n    const renders = React.useRef(0);\r\n\r\n    const { label, name,iconColor ,defaultDate,...rest } = props;\r\n    let compDate:Date=defaultDate?defaultDate:null;\r\n    // console.log(props);\r\n    useEffect(() => {\r\n    }, [])\r\n    var str: any = field.value;\r\n    if (str && str.length > 0) {\r\n        let day = str.split('/')[0];\r\n        let mon = str.split('/')[1];\r\n        let yr = str.split('/')[2];\r\n        let myDate = new Date(yr, mon - 1, day);\r\n        if (myDate instanceof Date)\r\n            compDate = myDate;\r\n    }\r\n\r\n    return (\r\n        <FastField name={name}>\r\n            {\r\n                ({ form, field }: FieldProps) => {\r\n                    const { setFieldValue } = form;\r\n                    const { value } = field;\r\n                    let datestr = '';\r\n                    const handleChange = (val: any) => {\r\n                        let datt = null;\r\n                        console.log(val);\r\n                        if (val && val !== 'Invalid Date') {\r\n                            let day = val.getDate();\r\n                            let month = val.getMonth() + 1;\r\n                            let year = val.getFullYear();\r\n                            datestr = day + '/' + (val.getMonth() + 1) + '/' + year;\r\n                            setFieldValue(name, datestr);\r\n\r\n                        }\r\n                        console.log(datestr);\r\n                    }\r\n\r\n                    return (\r\n                        <>\r\n                            {/* <div>renders:{renders.current++}</div> */}\r\n\r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}  >\r\n                                <KeyboardDatePicker\r\n                                    fullWidth\r\n                                    label={label}\r\n                                    placeholder={label}\r\n                                    value={compDate}\r\n                                    variant=\"inline\"\r\n                                    format=\"dd/MM/yyyy\"\r\n                                    autoOk={true}\r\n                                    onChange={val => {\r\n                                        compDate = val;\r\n                                        handleChange(val)\r\n                                    }\r\n                                  \r\n\r\n                                    }\r\n                                    margin=\"dense\"\r\n                                    inputVariant=\"outlined\"\r\n                                    InputProps = {{\r\n                                        endAdornment: null,\r\n                                        style:{\r\n                                           fontSize: '16px',\r\n                                           fontFamily:'Dubai Regular'\r\n                                           }\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                       style:{\r\n                                       fontSize: '16px',\r\n                                       fontFamily:'Dubai Regular'\r\n                                       \r\n                                       }}}\r\n                                    KeyboardButtonProps={{\r\n                                        style:{\r\n                                            fontSize: '16px',\r\n                                            color:iconColor,\r\n                                            padding:0\r\n                                           }   \r\n                                    }}\r\n                                />\r\n\r\n                            </MuiPickersUtilsProvider>\r\n                        </>\r\n                    )\r\n                }\r\n            }\r\n        </FastField>\r\n    )\r\n}\r\n\r\nexport default React.memo(AppDatePicker);\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ElementInputProps } from \"../../common/ElementInputProps\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { FieldAttributes, Field, FieldProps, useField } from \"formik\";\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider,\r\n} from \"@material-ui/pickers\";\r\nimport { Controller, useFormContext } from \"react-hook-form\";\r\n\r\ntype MydateProps = {} & ElementInputProps & FieldAttributes<{}>;\r\n\r\nconst ApplnDatePicker: React.FC<MydateProps> = (props) => {\r\n  const methods = useFormContext();\r\n  const { errors, getValues, setValue, register, control } = methods;\r\n  const [compDate, setCompdate] = useState(null);\r\n \r\n\r\n  useEffect(() => {\r\n    var str: any = control.defaultValuesRef.current[props.name];\r\n    console.log(\"date \" + str);\r\n    if (str && str.length > 0) {\r\n      let day = str.split(\"/\")[0];\r\n      let mon = str.split(\"/\")[1];\r\n      let yr = str.split(\"/\")[2];\r\n      let myDate = new Date(yr, mon - 1, day);\r\n      if (myDate instanceof Date) setCompdate(myDate);\r\n    }\r\n  }, []);\r\n\r\n  const handleChange = (val: any) => {\r\n    console.log(val);\r\n    if (val && val !== \"Invalid Date\") {\r\n      let day = val.getDate();\r\n      let month = val.getMonth() + 1;\r\n      let year = val.getFullYear();\r\n      let datestr = day + \"/\" + (val.getMonth() + 1) + \"/\" + year;\r\n      setValue(props.name, datestr);\r\n      methods.trigger(props.name);\r\n      props.onChange(val);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n  \r\n      <Controller\r\n        as={\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker\r\n            //  fullWidth\r\n              label={props.label}\r\n              placeholder={props.label}\r\n              value={compDate}\r\n              variant=\"inline\"\r\n              format=\"dd/MM/yyyy\"\r\n              inputVariant=\"outlined\"\r\n              size=\"small\"\r\n              autoOk={true}\r\n              error={errors[props.name] ? true : false}\r\n              helperText={errors[props.name]?.message}\r\n              onChange={(val) => {\r\n                console.log(val);\r\n                setCompdate(val);\r\n                handleChange(val);\r\n              }}\r\n              disablePast={props.disablePastDate?props.disablePastDate:false}\r\n              InputProps = {{\r\n                endAdornment: null,\r\n                style:{\r\n                    fontSize: '16px',\r\n                    fontFamily:'Dubai Regular'\r\n                   }\r\n            }}\r\n            InputLabelProps={{\r\n               style:{\r\n                fontSize: '16px',\r\n                fontStyle:\"oblique\",\r\n                fontFamily:'Dubai Regular'\r\n               }}}\r\n            KeyboardButtonProps={{\r\n                style:{\r\n                    fontSize: '16px',\r\n                    color:props.iconColor,\r\n                    padding:0\r\n                   }   \r\n            }}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n        }\r\n        name={props.name}\r\n        control={control}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(ApplnDatePicker);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardHeader } from \"@material-ui/core/\";\r\nimport {\r\n  makeStyles,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  CardContent,\r\n  Typography,\r\n  Paper,\r\n  IconButton,\r\n  Icon,\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { InputLabel } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport MinimizeIcon from \"@material-ui/icons/Minimize\";\r\nimport { postHttp } from \"../../lib/common/HttpService\";\r\nimport * as endpointContants from \"../../utils/ptmsEndpoints\";\r\nimport Toast from \"../../lib/components/toast/ErrorToast\";\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport moment from \"moment\";\r\nimport AppDatePicker from \"../../lib/components/datepicker/appDatePicker\";\r\nimport { FormProvider, useForm } from \"react-hook-form\";\r\nimport ApplnDatePicker from \"../../lib/components/datepicker/ApplnDatePicker\";\r\n\r\nfunction JobCard(props) {\r\n  const [selectedDate, setSelectedDate] = React.useState(null);\r\n  const [fromTime, setFromTime] = React.useState(\"\");\r\n  const [toTime, setToTime] = React.useState(\"\");\r\n  const [render, setRender] = useState(0);\r\n  const [disable, setDisable] = useState(true);\r\n  const allowedFileTypes = ['pdf', 'doc', 'png', 'docx', 'jpg', 'jpeg'];\r\n  const [showToaster1, setShowToaster1] = useState(false);\r\n  const [showToaster2, setShowToaster2] = useState(false);\r\n  const methods = useForm({\r\n    //resolver: yupResolver(schema),\r\n    mode: \"onChange\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(\"props in jobCard\", props);\r\n   // setDisable(true);\r\n  });\r\n\r\n  const validate = (job) => {\r\n    job.touched = true;\r\n    console.log(\"validate job:: \", job);\r\n\r\n    var count = 0;\r\n    \r\n    job.requestContainerList.map((container, inx) => {\r\n      if (\r\n        container.tokenOut &&\r\n        container.tokenOutSlotFrom !== undefined &&\r\n        container.tokenOutSlotTo !== undefined &&\r\n        container.tokenOutDate &&\r\n        container.etokenDto\r\n      ) {\r\n        if (container.valid !== true) {\r\n          container.valid = true;\r\n        }\r\n      } else {\r\n        if (container.valid === true) {\r\n          container.valid = false;\r\n        } else container.valid = false;\r\n      }\r\n    });\r\n    job.requestContainerList.map((container, inx) => {\r\n      if (container.valid === true) count++;\r\n    });\r\n    if (count === job.requestContainerList.length) job.disabled = false;\r\n    else job.disabled = true;\r\n    var cnt = 0;\r\n    var disCnt = 0;\r\n    props.jobs.map((jb, inx) => {\r\n      if (jb.disabled !== undefined && jb.touched===true) {\r\n        cnt = cnt + 1;\r\n        if (jb.disabled === false)\r\n          disCnt = disCnt + 1;\r\n      }\r\n     \r\n    });\r\n    setRender(render + 1);\r\n    if (cnt === disCnt)\r\n      setDisable(false);\r\n    else\r\n    setDisable(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n       <FormProvider {...methods}>\r\n       <Button\r\n                  style={{ textTransform: \"none\" ,marginLeft:\"1120px\"}}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  disabled={disable}\r\n                  onClick={() => {\r\n                    console.log(\"rrrrrr\", props.jobs);\r\n                    let e = props.jobs.filter(job => job.disabled === false);\r\n                    console.log(\"list of jobs for server\", e);\r\n                    let obj = {\r\n                      url: `${endpointContants.updateToken}`,\r\n                      body: e,\r\n                    };\r\n                    {\r\n                      postHttp(obj, true)\r\n                        .then((response) => {\r\n                          console.log(\"received response\", response);\r\n                          setDisable(true);\r\n                          props.reRender();\r\n                        })\r\n                        .catch((error) => {\r\n                          // const errMsg = error.message;\r\n                          // dispatch(fetchUserFailure(errMsg));\r\n                        });\r\n                    }\r\n                   }}\r\n                >\r\n                  update\r\n                </Button>\r\n      {props.jobs && props.jobs.length > 0 ? (\r\n        props.jobs.map((job, inx) => (\r\n          <Card\r\n            key={job.referenceNumber}\r\n            style={{ width: \"1200px\", marginTop: \"20px\" }}\r\n          >\r\n            <div className=\"row\">\r\n              <Box\r\n                style={{\r\n                  width: \"2rem\",\r\n                  height: \"2rem\",\r\n                  color: \"white\",\r\n                  textAlign: \"center\",\r\n                  marginTop: \"5px\",\r\n                  backgroundColor: \"#0E1B3D\",\r\n                  marginLeft: \"40px\",\r\n                  border: \"2px solid #ccc\",\r\n                }}\r\n              >\r\n                {inx + 1}\r\n              </Box>\r\n              <div className=\"col\">\r\n                <InputLabel>Job Number#{job.referenceNumber}</InputLabel>\r\n              </div>\r\n              {/* <div className=\"col\" style={{ marginLeft: \"800px\" }}>\r\n                <Button\r\n                  style={{ textTransform: \"none\" }}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  disabled={job.disabled}\r\n                  onClick={() => {\r\n                    console.log(\"rrrrrr\", job);\r\n                    let obj = {\r\n                      url: `${endpointContants.updateToken}`,\r\n                      body: job,\r\n                    };\r\n                    {\r\n                      postHttp(obj, true)\r\n                        .then((response) => {\r\n                          console.log(\"received response\", response);\r\n\r\n                          props.reRender();\r\n                        })\r\n                        .catch((error) => {\r\n                          // const errMsg = error.message;\r\n                          // dispatch(fetchUserFailure(errMsg));\r\n                        });\r\n                    }\r\n                  }}\r\n                >\r\n                  update\r\n                </Button>\r\n              </div> */}\r\n              <div className=\"col-md\"  style={{ marginLeft: \"900px\" }}>\r\n                <IconButton\r\n                  style={{ color: \"black\" }}\r\n                  onClick={() => {\r\n                    props.onExpandClicked(job);\r\n                    setShowToaster1(false);\r\n                    setShowToaster2(false);\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  {job.open ? <MinimizeIcon /> : <AddIcon />}{\" \"}\r\n                </IconButton>\r\n              </div>\r\n            </div>\r\n            <Grid item container xs={12} sm spacing={1}>\r\n              <Grid item xs={4} sm={2}>\r\n                <InputLabel\r\n                  style={{\r\n                    fontSize: \"13px\",\r\n                    color: \"black\",\r\n                    marginLeft: \"20px\",\r\n                  }}\r\n                >\r\n                  Consignee Name\r\n                </InputLabel>\r\n\r\n                <InputLabel\r\n                  style={{\r\n                    fontSize: \"13px\",\r\n                    color: \"black\",\r\n                    marginLeft: \"20px\",\r\n                  }}\r\n                >\r\n                  {job.consigneeName}\r\n                </InputLabel>\r\n              </Grid>\r\n\r\n              {/* <Grid item xs={6} sm={2}>\r\n                <InputLabel style={{ fontSize: \"13px\", color: \"black\" }}>\r\n                  Date & Time\r\n                </InputLabel>\r\n\r\n                <InputLabel style={{ fontSize: \"13px\", color: \"black\" }}>\r\n                  {job.dateAndTime}\r\n                </InputLabel>\r\n              </Grid> */}\r\n\r\n              <Grid item xs={4} sm={2}>\r\n                <InputLabel style={{ fontSize: \"13px\", color: \"black\" }}>\r\n                  Truck Number\r\n                </InputLabel>\r\n\r\n                <InputLabel style={{ fontSize: \"13px\", color: \"black\" }}>\r\n                  {job.vehicleRegNo}\r\n                </InputLabel>\r\n              </Grid>\r\n\r\n              {/* <Grid item xs={6} sm={2}>\r\n                <InputLabel style={{ fontSize: \"13px\", color: \"black\" }}>\r\n                  Truck Type\r\n                </InputLabel>\r\n\r\n                <InputLabel style={{ fontSize: \"13px\", color: \"black\" }}>\r\n                  {job.vehicleType}\r\n                </InputLabel>\r\n              </Grid> */}\r\n\r\n              <Grid item xs={4} sm={2}>\r\n                <InputLabel style={{ fontSize: \"13px\", color: \"black\" }}>\r\n                  <img src=\"./location-pin.svg\" /> {job.dropAddress}\r\n                </InputLabel>\r\n              </Grid>\r\n              <Grid item xs={4} sm={2}>\r\n                <InputLabel style={{ fontSize: \"13px\", color: \"black\" }}>\r\n                  Requester Company Name\r\n                </InputLabel>\r\n\r\n                <InputLabel style={{ fontSize: \"13px\", color: \"black\" }}>\r\n                  {job.requestedBy}\r\n                </InputLabel>\r\n              </Grid>\r\n              <Grid item xs={4} sm={2}>\r\n                <InputLabel style={{ fontSize: \"13px\", color: \"black\" }}>\r\n                  Contact Person \r\n                </InputLabel>\r\n\r\n                <InputLabel style={{ fontSize: \"13px\", color: \"black\" }}>\r\n                  {job.requesterContactName}\r\n                </InputLabel>\r\n              </Grid>\r\n              <Grid item xs={4} sm={2}>\r\n                <InputLabel style={{ fontSize: \"13px\", color: \"black\" }}>\r\n                  Contact Number\r\n                </InputLabel>\r\n\r\n                <InputLabel style={{ fontSize: \"13px\", color: \"black\" }}>\r\n                  {job.requesterContactNumber}\r\n                </InputLabel>\r\n              </Grid>\r\n            </Grid>\r\n            \r\n      \r\n              \r\n            {job.open && (\r\n              <>\r\n                <Table>\r\n                  <TableBody>\r\n                    <TableRow style={{ borderTop: \"1px solid grey\" }}>\r\n                      <TableCell style={{ borderBottom: \"none\" }}>\r\n                        <InputLabel style={{ fontSize: \"13px\", color: \"grey\" }}>\r\n                          Container Number\r\n                        </InputLabel>\r\n                      </TableCell>\r\n\r\n                      <TableCell style={{ borderBottom: \"none\" }}>\r\n                        <InputLabel style={{ fontSize: \"13px\", color: \"grey\" }}>\r\n                          Declaration#\r\n                        </InputLabel>\r\n                      </TableCell>\r\n\r\n                      <TableCell style={{ borderBottom: \"none\" }}>\r\n                        <InputLabel style={{ fontSize: \"13px\", color: \"grey\" }}>\r\n                          Booking#\r\n                        </InputLabel>\r\n                      </TableCell>\r\n\r\n                      <TableCell style={{ borderBottom: \"none\" }}>\r\n                        <InputLabel style={{ fontSize: \"13px\", color: \"grey\" }}>\r\n                          Pickup\r\n                        </InputLabel>\r\n                      </TableCell>\r\n\r\n                      <TableCell style={{ borderBottom: \"none\" }}>\r\n                        <InputLabel style={{ fontSize: \"13px\", color: \"grey\" }}>\r\n                          Date And Time\r\n                        </InputLabel>\r\n                      </TableCell>\r\n\r\n\r\n                      <TableCell style={{ borderBottom: \"none\" }}>\r\n                        <InputLabel style={{ fontSize: \"13px\", color: \"grey\" }}>\r\n                          Token Number\r\n                        </InputLabel>\r\n                      </TableCell>\r\n\r\n                      <TableCell style={{ borderBottom: \"none\" }}>\r\n                        <InputLabel style={{ fontSize: \"13px\", color: \"grey\" }}>\r\n                          Token Slot\r\n                        </InputLabel>\r\n                      </TableCell>\r\n                      <TableCell style={{ borderBottom: \"none\" }}>\r\n                        <InputLabel style={{ fontSize: \"13px\", color: \"grey\" }}>\r\n                          eToken\r\n                        </InputLabel>\r\n                      </TableCell>\r\n                    </TableRow>\r\n\r\n                    {job.requestContainerList.map((container, inx) => (\r\n                      <TableRow key={container.container_number}>\r\n                        <TableCell>\r\n                          <InputLabel\r\n                            style={{ fontSize: \"13px\", color: \"black\" }}\r\n                          >\r\n                            {container.container_number}\r\n                          </InputLabel>\r\n                        </TableCell>\r\n\r\n                        <TableCell>\r\n                          <InputLabel\r\n                            style={{ fontSize: \"13px\", color: \"black\" }}\r\n                          >\r\n                            {container.boeNumber}\r\n                          </InputLabel>\r\n                        </TableCell>\r\n\r\n                        <TableCell>\r\n                          <InputLabel\r\n                            style={{ fontSize: \"13px\", color: \"black\" }}\r\n                          >\r\n                            {container.requestDetailsNumber}\r\n                          </InputLabel>\r\n                        </TableCell>\r\n\r\n                        <TableCell>\r\n                          <InputLabel\r\n                            style={{ fontSize: \"13px\", color: \"black\" }}\r\n                          >\r\n                            <img src=\"./location-pin.svg\" />{\" \"}\r\n                            {container.pickupLocation}\r\n                          </InputLabel>\r\n                        </TableCell>\r\n\r\n                        <TableCell>\r\n                         \r\n                          <InputLabel\r\n                            style={{ fontSize: \"13px\", color: \"black\" }}\r\n                          >\r\n                            {container.date_time}\r\n                          </InputLabel>\r\n                        </TableCell>\r\n\r\n                        <TableCell>\r\n                          <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"Token#\"\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            defaultValue={container.tokenOut}\r\n                            onChange={(e) => {\r\n                              container.tokenOut = e.target.value;\r\n                              console.log(\"blurred\", container.tokenOut);\r\n                              // updateTokenUnassigned(job.token);\r\n                              validate(job);\r\n                            }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Grid container>\r\n                            <Grid item xs={5} style={{marginTop:\"20px\"}}>\r\n                              {/* <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <KeyboardDatePicker\r\n                                  InputAdornmentProps={{ position: \"start\" }}\r\n                                  disableToolbar\r\n                                  variant=\"inline\"\r\n                                  format=\"dd/MM/yyyy\"\r\n                                  margin=\"normal\"\r\n                                  id=\"date-picker-inline\"\r\n                                  value={\r\n                                    container.tokenOutDate\r\n                                      ? container.tokenOutDate\r\n                                      : null\r\n                                  }\r\n                                  onChange={(date) => {\r\n                                    let datestr = '';\r\n                                    console.log(\"selected date::::::::\", date);\r\n                                    //console.log(\"xxxxxxxxxxxxxxxxx::\", moment(date).format('dd/MM/yyyy'));\r\n                                   // container.tokenOutDate = moment(date).format('DD/MM/YYYY');\r\n                                   if (date && date !== 'Invalid Date') {\r\n                                    let day = date.getDate();\r\n                                    let month = date.getMonth() + 1;\r\n                                    let year = date.getFullYear();\r\n                                     datestr = day + '/' + (date.getMonth() + 1) + '/' + year;\r\n                                     console.log(\"selected date::::::::1\", datestr);\r\n                                    setSelectedDate(datestr);\r\n        \r\n                                }\r\n                                    container.tokenOutDate = datestr;\r\n                                    validate(job);\r\n                                  }}\r\n                                  KeyboardButtonProps={{\r\n                                    style: {\r\n                                      fontSize: \"12px\",\r\n                                      color: \"#1FA5FF\",\r\n                                      padding: 0,\r\n                                    },\r\n                                  }}\r\n                                />\r\n                              </MuiPickersUtilsProvider> */}\r\n                              <ApplnDatePicker name={\"dateTime\"} label=\"\" iconColor=\"#1FA5FF\" disablePastDate={true}  onChange={(e) => {\r\n                                container.tokenOutDate = methods.getValues().dateTime;\r\n                                validate(job);\r\n                                console.log(\"selected date ::::\", e);\r\n                          }}/>\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                              <hr\r\n                                style={{\r\n                                  width: \"0px\",\r\n                                  height: \"50px\",\r\n                                  backgroundColor: \"#D3D3D3\",\r\n                                }}\r\n                              ></hr>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={2}>\r\n                              <TextField\r\n                                id=\"toTime\"\r\n                                type=\"time\"\r\n                                InputLabelProps={{\r\n                                  shrink: true,\r\n                                }}\r\n                                inputProps={{\r\n                                  size: \"small\",\r\n                                }}\r\n                                defaultValue={container.tokenOutSlotFrom}\r\n                                onChange={(event) => {\r\n                                  setToTime(event.target.value);\r\n                                  container.tokenOutSlotFrom =\r\n                                    event.target.value;\r\n                                  validate(job);\r\n                                  //  setFromDate(event.target.value);\r\n                                }}\r\n                              />\r\n                              <TextField\r\n                                id=\"fromTime\"\r\n                                type=\"time\"\r\n                                size=\"small\"\r\n                                inputProps={{\r\n                                  size: \"small\",\r\n                                }}\r\n                                defaultValue={container.tokenOutSlotTo}\r\n                                onChange={(event) => {\r\n                                  setFromTime(event.target.value);\r\n                                  container.tokenOutSlotTo = event.target.value;\r\n                                  validate(job);\r\n                                  //  setFromDate(event.target.value);\r\n                                }}\r\n                              />\r\n                            </Grid>\r\n                          </Grid>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <label htmlFor={container.container_number}>\r\n                            <input\r\n                              type=\"file\"\r\n                              name={container.container_number}\r\n                              id={container.container_number}\r\n                              style={{ display: \"none\" }}\r\n                              onChange={(e) => {\r\n                                \r\n                                const file = e.target.files[0];\r\n                                e.target.value = '';\r\n                                console.log(\"???????????\", container);\r\n                               \r\n                                let promiseData = new Promise(\r\n                                  (resolve, reject) => {\r\n                                    const reader = new FileReader();\r\n\r\n                                    reader.onload = (event) => {\r\n                                      resolve(event.target.result);\r\n                                    };\r\n\r\n                                    reader.onerror = (err) => {\r\n                                      reject(err);\r\n                                    };\r\n\r\n                                    reader.readAsDataURL(file);\r\n                                  }\r\n                                );\r\n\r\n                                promiseData.then((result) => {\r\n                                  const contentArr = result.split(\",\");\r\n                                  const fileType = contentArr[0]\r\n                                    .replace(\"data:\", \"\")\r\n                                    .replace(\";base64\", \"\");\r\n                                  let etokenDto = {};\r\n                                  console.log(\"file type::\", fileType);\r\n                                  console.log(\"file size::\", file.size);\r\n                                  if (allowedFileTypes.some(item => fileType.split(\"/\")[1] === item)) {\r\n                                    if (file.size <= 500000) {\r\n                                      etokenDto.fileContent = contentArr[1];\r\n                                      etokenDto.fileType = fileType;\r\n                                      etokenDto.tokenType = \"FCL_OUT\";\r\n                                      etokenDto.fileName = file.name;\r\n                                      container.etokenDto = etokenDto;\r\n                                      console.log(\"container::\", container);\r\n                                      console.log(\"etoken::\", container.etokenDto);\r\n                                      container.upload = true;\r\n                                      validate(job);\r\n                                      setShowToaster1(false);\r\n                                      setShowToaster2(false);\r\n                                    } else {\r\n                                      console.log(\"file size error\");\r\n                                      container.upload = false;\r\n                                      \r\n                                      validate(job);\r\n                                      setShowToaster1(true);\r\n                                    }\r\n                                  } else {\r\n                                    console.log(\"file format error\");\r\n                                    container.upload = false;\r\n                                    \r\n                                    validate(job);\r\n                                    setShowToaster2(true);\r\n                                  }\r\n                                }\r\n                                );\r\n                              }}\r\n                              //  onChange={() => { selectFile(Event, job,props.key) }}\r\n                            />\r\n\r\n                            {!container.upload && (\r\n                              <img src=\"./token_upload.svg\" />\r\n                            )}\r\n                            {container.upload && (\r\n                              <img src=\"./token_success.svg\" />\r\n                            )}\r\n                              {showToaster1 && (\r\n                                        <Toast\r\n                                          icon=\"error\"\r\n                                          title=\"File size error\"\r\n                                          message=\"Allowed maximum size is 500 KB\"\r\n                                          showToast={() => {\r\n                                            setShowToaster1(false);\r\n                                          }}\r\n                                          position=\"top-right\"\r\n                                        />\r\n                            )}\r\n                             {showToaster2 && (\r\n                                        <Toast\r\n                                          icon=\"error\"\r\n                                          title=\"File format not supported\"\r\n                                          message=\"*Only files with the following extensions are allowed *.pdf,.doc,.png,.jpg,.jpeg  \"\r\n                                          showToast={() => {\r\n                                            setShowToaster2(false);\r\n                                          }}\r\n                                          position=\"top-right\"\r\n                                        />\r\n                                      )}\r\n                          </label>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </>\r\n            )}\r\n          </Card>\r\n        ))\r\n      ) : (\r\n        <Paper\r\n          elevation={5}\r\n          style={{\r\n            borderRadius: 8,\r\n            padding: \"30px\",\r\n            marginTop: 20,\r\n            minWidth: \"760px\",\r\n            minHeight: \"100px\",\r\n            color: \"#FF7171\",\r\n          }}\r\n        >\r\n          <Grid container direction=\"row\" spacing={5}>\r\n            <Grid item sm={12} xs={12}>\r\n              <Typography\r\n                variant=\"subtitle1\"\r\n                style={{ fontSize: \"16px\", textAlign: \"center\" }}\r\n              >\r\n                <b>{\"No records found\"}</b>\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n          )}\r\n        </FormProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default React.memo(JobCard);\r\n"],"sourceRoot":""}