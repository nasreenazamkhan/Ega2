{"version":3,"sources":["service/FileUploadService.js","components/transporter/FileUpload.js"],"names":["upload","file","popUpParams","onUploadProgress","formData","FormData","append","obj","url","body","config","headers","access_token","getLoginUserAccessToken","params","locale","paramDto","uploadType","referenceNumber","dpwTransactionId","boeNumber","axios","post","then","response","endLoading","data","catch","error","getFiles","get","UploadFiles","useState","undefined","selectedFiles","setSelectedFiles","currentFile","setCurrentFile","progress","setProgress","message","setMessage","fileInfos","setFileInfos","useEffect","UploadService","className","role","aria-valuenow","aria-valuemin","aria-valuemax","style","width","type","onChange","event","target","files","disabled","onClick","Math","round","loaded","total","map","index","key","href","name"],"mappings":"+FACA,8BAgFe,KACbA,OA9Ea,SAACC,EAAKC,EAAYC,GAC/B,IAAIC,EAAW,IAAIC,SAEnBD,EAASE,OAAO,OAAQL,GACxB,IAEIM,EAAO,CAAEC,IAFK,yCAGhBC,KAAKL,GAMJM,EAAS,CACTC,QAAS,CACLC,aAJUC,cAKV,eAAgB,uBAEpBC,OAAQ,CACJC,OAAQ,KAIVC,SAAU,CACRhB,OAAQE,EAAYe,WACpBC,gBAAiBhB,EAAYgB,gBAC7BC,iBAAkBjB,EAAYiB,iBAC9BC,UAAUlB,EAAYkB,YAKxBjB,oBAKN,OAAOkB,IAAMC,KAAKf,EAAIC,IAAKD,EAAIE,KAAMC,GACpCa,MAAK,SAAAC,GAEH,OADAC,cACOD,EAASE,QAEnBC,OAAM,SAAAC,GAEH,OADAH,cACOG,MAmCTC,SA5Be,WAEhB,IAEItB,EAFc,uCAQdG,EAAS,CACTC,QAAS,CACLC,aAJUC,eAOdC,OAAQ,CACJC,OAAQ,OAOf,OAAQM,IAAMS,IAAIvB,EAASG,M,oFCoBdqB,UA7FK,WAAO,IAAD,EACkBC,wBAASC,GAD3B,mBACjBC,EADiB,KACFC,EADE,OAEcH,wBAASC,GAFvB,mBAEjBG,EAFiB,KAEJC,EAFI,OAGQL,mBAAS,GAHjB,mBAGjBM,EAHiB,KAGPC,EAHO,OAIMP,mBAAS,IAJf,mBAIjBQ,EAJiB,KAIRC,EAJQ,OAKUT,mBAAS,IALnB,mBAKjBU,EALiB,KAKNC,EALM,KAOxBC,qBAAU,WACPC,IAAchB,WAAWN,MAAK,SAACC,GAC7BmB,EAAanB,EAASE,WAExB,IAgCH,OAEG,6BACCU,GACI,yBAAKU,UAAU,YACd,yBACEA,UAAU,eACTC,KAAK,cACLC,gBAAeV,EACfW,gBAAc,IACdC,gBAAc,MACfC,MAAO,CAAEC,MAAOd,EAAW,MAE5BA,IAML,2BAAOQ,UAAU,mBACf,2BAAOO,KAAK,OAAOC,SAlDP,SAACC,GAClBpB,EAAiBoB,EAAMC,OAAOC,WAoD3B,4BACEX,UAAU,kBACVY,UAAWxB,EACXyB,QAnDQ,WACZ,IAAIvB,EAAcF,EAAc,GAEhCK,EAAY,IACZF,EAAeD,GAEhBS,IAAc7C,OAAOoC,GAAa,SAACmB,GACjChB,EAAYqB,KAAKC,MAAO,IAAMN,EAAMO,OAAUP,EAAMQ,WAEnDxC,MAAK,SAACC,GAEL,OADAiB,EAAWjB,EAASE,KAAKc,SAClBK,IAAchB,cAEtBN,MAAK,SAACkC,GACLd,EAAac,EAAM/B,SAEpBC,OAAM,WACLY,EAAY,GACZE,EAAW,8BACXJ,OAAeJ,MAGnBE,OAAiBF,KA0Bd,UAQA,yBAAKa,UAAU,oBAAoBC,KAAK,SACrCP,GAGH,yBAAKM,UAAU,QACb,yBAAKA,UAAU,eAAf,iBACD,wBAAIA,UAAU,+BACVJ,GACCA,EAAUsB,KAAI,SAAC/D,EAAMgE,GAAP,OACZ,wBAAInB,UAAU,kBAAkBoB,IAAKD,GACnC,uBAAGE,KAAMlE,EAAKO,KAAMP,EAAKmE","file":"static/js/67.473efbf0.chunk.js","sourcesContent":["\r\nimport axios from \"axios\";\r\nimport { endLoading, getLoginUserAccessToken } from \"../../src/lib/common/storeAccess\";\r\n\r\nconst upload = (file,popUpParams,onUploadProgress) => {\r\n  let formData = new FormData();\r\n\r\n  formData.append(\"file\", file);\r\n  const remoteUrl = \"/ptms/app/api/secure/fileUpload/upload\";\r\n\r\n  let obj =  { url: remoteUrl ,\r\n    body:formData\r\n };\r\n\r\n\r\n let accessToken = getLoginUserAccessToken();\r\n\r\n let config = {\r\n     headers: {\r\n         access_token: accessToken,\r\n         'content-type': 'multipart/form-data',\r\n     },\r\n     params: {\r\n         locale: 'en',\r\n\r\n\r\n       \r\n       paramDto: {\r\n         upload: popUpParams.uploadType,\r\n         referenceNumber: popUpParams.referenceNumber,\r\n         dpwTransactionId: popUpParams.dpwTransactionId,\r\n         boeNumber:popUpParams.boeNumber\r\n       }\r\n\r\n         \r\n       },\r\n       onUploadProgress,\r\n }\r\n\r\n\r\n\r\n return axios.post(obj.url, obj.body, config)\r\n .then(response => {\r\n    endLoading();\r\n    return response.data;\r\n})\r\n.catch(error => {\r\n    endLoading();\r\n    return error;\r\n\r\n})\r\n\r\n\r\n}\r\n\r\nconst getFiles = () => {\r\n\r\n const remoteUrl = \"ptms/app/api/secure/fileUpload/files\";\r\n\r\n let obj =  { url: remoteUrl ,\r\n };\r\n\r\n\r\n let accessToken = getLoginUserAccessToken();\r\n\r\n let config = {\r\n     headers: {\r\n         access_token: accessToken,\r\n        \r\n     },\r\n     params: {\r\n         locale: 'en'\r\n       },\r\n     \r\n }\r\n\r\n\r\n\r\n  return  axios.get(obj.url, config)\r\n};\r\n\r\nexport default {\r\n  upload,\r\n  getFiles,\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport UploadService from \"../../service/FileUploadService\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst UploadFiles = () => {\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n\r\n  useEffect(() => {\r\n     UploadService.getFiles().then((response) => {\r\n       setFileInfos(response.data);\r\n     });\r\n  }, []);\r\n\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n   \r\n  };\r\n\r\n  const upload = () => {\r\n     let currentFile = selectedFiles[0];\r\n\r\n     setProgress(60);\r\n     setCurrentFile(currentFile);\r\n\r\n    UploadService.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        return UploadService.getFiles();\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n\r\n    setSelectedFiles(undefined);\r\n  };\r\n\r\n  return (\r\n\r\n     <div>\r\n     {currentFile && ( \r\n          <div className=\"progress\">\r\n           <div\r\n             className=\"progress-bar\" \r\n              role=\"progressbar\"\r\n              aria-valuenow={progress}\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n             style={{ width: progress + \"%\" }}    \r\n           >\r\n           {progress}\r\n          </div>\r\n         </div> \r\n        )} \r\n\r\n  \r\n       <label className=\"btn btn-default\">\r\n         <input type=\"file\" onChange={selectFile} />\r\n       </label>\r\n\r\n       <button\r\n         className=\"btn btn-success\"\r\n         disabled={!selectedFiles}\r\n         onClick={upload}\r\n       >\r\n         Upload\r\n       </button>\r\n\r\n       <div className=\"alert alert-light\" role=\"alert\">\r\n         {message}\r\n       </div>\r\n\r\n       <div className=\"card\">\r\n         <div className=\"card-header\">List of Files</div>\r\n        <ul className=\"list-group list-group-flush\">\r\n           {fileInfos &&\r\n             fileInfos.map((file, index) => (\r\n               <li className=\"list-group-item\" key={index}>\r\n                 <a href={file.url}>{file.name}</a>\r\n               </li>\r\n             ))}\r\n         </ul>\r\n       </div>\r\n     </div>\r\n  )\r\n}\r\n\r\nexport default UploadFiles;"],"sourceRoot":""}