{"version":3,"sources":["lib/components/messagebar/messagebar.js","lib/components/formContainer/formContainer.js","lib/components/txtinput/textInput.tsx","lib/components/dialog/alertDialog.js","lib/components/dialog/confirmDialog.js","lib/components/table/DataTable.tsx","lib/components/table/NormalTable.tsx","components/masters/ManageTruckAggregator.js"],"names":["React","memo","mb","useSelector","state","messagebar","dispatch","useDispatch","MessageContainer","msgClass","icon","className","Icon","messages","map","e","i","key","onClick","hideMessageBar","console","log","show","messageType","SUCCESS","ERROR","INFO","WARNING","getMessageBar","props","Card","CardHeader","title","CardContent","children","useStyles","makeStyles","theme","txtDiv","display","iconDiv","width","position","top","fontSize","txtField","required","name","label","fieldIcon","helperText","placeholder","classes","useRef","useEffect","form","field","meta","setFieldValue","showError","touched","error","value","event","fullWidth","id","InputProps","endAdornment","onClose","isopen","message","closeTxt","confirmTxt","onConfirm","isConfirm","closeIcon","openIcon","closeButtonCss","confirmButtonCss","StyledTableCell","withStyles","createStyles","head","backgroundColor","palette","common","black","color","white","body","TableCell","StyledTableRow","root","action","hover","TableRow","table","minWidth","getTableRow","dk","row","index","rd","datastr","eval","type","COLUMN_TYPE_STRING","align","DataTable","tableData","tableKeys","handleClick","actions","remote","remoteUrl","refresh","dataRootKey","useState","rowsPerPage","page","sortColumn","currentPageRows","currentPageKey","dtstate","setdtstate","errorMsg","alertOpen","setAlertOpen","loading","setLoading","loadDatTable","updateAlertState","status","msg","setCurrentSortColumn","sortEle","filter","tk","sort","sortActive","prevState","getPageData","trim","loadHttp","pageNo","pageSize","fnUrl","indexOf","getHttp","url","then","remoteData","keyEle","catch","handleSort","scol","dir","fnlUrl","getTableHeadRow","active","direction","currentPage","nextPage","slice","handleChangePage","newpage","handleChangeRowsPerPage","target","length","style","padding","marginBottom","component","Paper","aria-label","extIndex","act","x","tip","placement","arrow","rowsPerPageOptions","colSpan","count","backIconButtonProps","onChangePage","nextIconButtonProps","onChangeRowsPerPage","NormalTable","chkbox","checked","evnt","indx","truckAggreagatorCol","COLUMN_TYPE_NUMBER","truckForm","code","remoteBaseUrl","item","actionIndex","truckAggregatorCode","ManageTruckAggregator","fmk","NO_DIALOG","showPopup","setShowPopup","pstate","setPstate","setRemoteURl","formvalues","initialValues","formik","autoComplete","text","resetForm","finalURL","values","element","CONFIRM_DIALOG","obj","endpointContants","truckAggCode","postHttp","response"],"mappings":"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","file":"static/js/46.2ee45160.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { ms } from 'date-fns/locale';\r\nimport { SUCCESS, ERROR, INFO, WARNING } from '../../redux/messagebar/messagebarType';\r\nimport './messagebar.css';\r\nimport { Icon } from '@material-ui/core';\r\nimport { hideMessageBar } from '../../redux';\r\n\r\nfunction Messagebar() {\r\n    const mb = useSelector(state => state.messagebar);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n    const MessageContainer = ({ msgClass, icon }) => {\r\n        return (\r\n            <>\r\n                <div className={msgClass}>\r\n                    <div className=\"message-icon\"><Icon>{icon}</Icon></div>\r\n\r\n                    <div className=\"message-list\">\r\n                        <ul>{\r\n                            mb.messages.map((e, i) => {\r\n                                return <li key={i}>{e}</li>\r\n                            })\r\n                        }</ul>\r\n                    </div>\r\n                    <div className=\"close-icon\" onClick={() => {\r\n                        dispatch(hideMessageBar())\r\n                    }}>\r\n                        <Icon>clear</Icon>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    const getWarningMessage = () => {\r\n        return (\r\n            <>\r\n                <MessageContainer msgClass='alert-message-box bg-warning' icon='warning' />\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getInfoMessage = () => {\r\n        return (\r\n            <>\r\n                <MessageContainer msgClass='alert-message-box bg-info' icon='info' />\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getErrorMessage = () => {\r\n        return (\r\n            <>\r\n                <MessageContainer msgClass='alert-message-box bg-error' icon='error' />\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getSuccessMessage = () => {\r\n        return (\r\n            <>\r\n                <MessageContainer msgClass='alert-message-box bg-success' icon='check' />\r\n            </>)\r\n    }\r\n\r\n    const getMessageBar = () => {\r\n        console.log('IN componenet');\r\n        switch (mb.messageType) {\r\n            case SUCCESS: return getSuccessMessage();\r\n            case ERROR: return getErrorMessage();\r\n            case INFO: return getInfoMessage();\r\n            case WARNING: return getWarningMessage();\r\n            default:\r\n                return <></>;\r\n        }\r\n\r\n    }\r\n    console.log(mb);\r\n    return (\r\n        <>\r\n            {mb.show && mb.show === true && getMessageBar()}\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default React.memo(Messagebar);\r\n","import React from 'react'\r\nimport { Card, CardHeader, CardContent } from '@material-ui/core';\r\nimport './formContainer.css';\r\nimport Messagebar from '../messagebar/messagebar';\r\nfunction FormContainer(props) {\r\n    return (\r\n        <>\r\n            <Card>\r\n                <CardHeader title={props.title} className=\"page-header\" />\r\n                <CardContent>\r\n                    <Messagebar />\r\n                    {props.children}\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(FormContainer);\r\n","import { TextField, makeStyles, Icon } from \"@material-ui/core\";\r\nimport { ClearOutlined, AccountCircle } from '@material-ui/icons';\r\nimport { FastField, FieldAttributes, FieldProps } from \"formik\";\r\nimport React, { useEffect } from 'react';\r\nimport { ElementInputProps } from '../../common/ElementInputProps';\r\nimport './textInput.css';\r\nimport ClearIcon from \"../icons/clearIcon\";\r\n\r\ntype MyTextFieldProps =\r\n    { iconType?: string } & ElementInputProps & FieldAttributes<{}>;\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    txtDiv: {\r\n        display: \"flex\"\r\n    },\r\n    iconDiv: {\r\n        width: \"25px\",\r\n        \"& span\": {\r\n            position: \"absolute\",\r\n            top: \"40%\",\r\n            fontSize: \"16px\"\r\n        }\r\n    },\r\n    txtField: {\r\n    }\r\n}));\r\n\r\n\r\nconst TextInput: React.FC<ElementInputProps>\r\n    = ({ required = false, name, label, helperText, fieldIcon,placeholder }) => {\r\n        const renders = React.useRef(0);\r\n        const showIcon = false;\r\n        const classes = useStyles();\r\n        useEffect(() => {\r\n        }, [])\r\n\r\n        return (\r\n            <>\r\n                <FastField name={name}>\r\n                    {\r\n                        ({ form, field, meta }: FieldProps) => {\r\n                            const { setFieldValue } = form;\r\n\r\n                            const handleIconClick = (event: any) => {\r\n                                setFieldValue(name, '');\r\n                            }\r\n\r\n                            let showError = false;\r\n                            if (meta.touched && meta.error) {\r\n                                showError = true;\r\n                                helperText = meta.error;\r\n                            }\r\n                            let icon = null;\r\n                            if (field.value) {\r\n                                icon = <ClearIcon onClick={handleIconClick} />;\r\n                            } else {\r\n                                icon = null;\r\n                            }\r\n                            return (\r\n                                <>\r\n                                    {/* <div>renders:{renders.current++}</div> */}\r\n                                    <div className={classes.txtDiv}>\r\n                                        {fieldIcon && <div className={classes.iconDiv}><Icon>{fieldIcon}</Icon></div>}\r\n                                        <TextField {...field} label={label} fullWidth id={field.name} className={classes.txtField}\r\n                                            error={showError}\r\n                                            helperText={showError ? meta.error : \"\"}\r\n                                            required={required} placeholder={placeholder}\r\n                                            InputProps={{\r\n                                                endAdornment: icon\r\n                                            }}\r\n\r\n                                        />\r\n                                    </div>\r\n                                </>\r\n\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                </FastField>\r\n\r\n            </>\r\n        )\r\n\r\n    }\r\n\r\nexport default React.memo(TextInput);","import React from 'react'\r\nimport { AppDialog } from './dialogBox'\r\n\r\nfunction AlertDialog(props) {\r\n    return (\r\n        <div>\r\n            <AppDialog title=\"Alert\" onClose={props.onClose} isopen={props.isopen}>\r\n                {props.message}\r\n            </AppDialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(AlertDialog);\r\n","import React from 'react'\r\nimport { AppDialog } from './dialogBox'\r\n\r\nfunction ConfirmDialog(props) {\r\n    return (\r\n        <div>\r\n            <AppDialog title={props.title} onClose={props.onClose} children={props.children} closeTxt={props.closeTxt}\r\n                confirmTxt={props.confirmTxt} onConfirm={props.onConfirm} isConfirm={true} isopen={props.isopen}\r\n                closeIcon={props.closeIcon} openIcon={props.openIcon} closeButtonCss={props.closeButtonCss} confirmButtonCss={props.confirmButtonCss}>\r\n                {props.children}\r\n            </AppDialog>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(ConfirmDialog);\r\n","import React, { Props, useState, useEffect } from \"react\";\r\nimport {\r\n  makeStyles,\r\n  withStyles,\r\n  createStyles,\r\n  Theme,\r\n} from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  Icon,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  TextField,\r\n  Tooltip,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport \"./table.css\";\r\nimport { TableProps } from \"./tableProps\";\r\nimport { COLUMN_TYPE_STRING } from \"../../common/Constants\";\r\nimport AlertDialog from \"../dialog/alertDialog\";\r\nimport { getHttp } from \"../../common/HttpService\";\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  })\r\n)(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  })\r\n)(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n});\r\n\r\nconst getTableRow = ({ dk, row, index }: any) => {\r\n  let rd = \"row.\" + dk.key;\r\n  let datastr = eval(rd);\r\n  if (dk.type === COLUMN_TYPE_STRING)\r\n    return (\r\n      <StyledTableCell key={index} align=\"center\">\r\n        {datastr}\r\n      </StyledTableCell>\r\n    );\r\n  else\r\n    return (\r\n      <StyledTableCell align=\"center\" key={index}>\r\n        {datastr}\r\n      </StyledTableCell>\r\n    );\r\n};\r\n\r\nconst DataTable: React.FC<TableProps> = ({\r\n  tableData,\r\n  tableKeys,\r\n  handleClick,\r\n  actions = [],\r\n  remote,\r\n  remoteUrl,\r\n  refresh,\r\n  dataRootKey,\r\n}) => {\r\n  const [dtstate, setdtstate] = useState({\r\n    rowsPerPage: 10,\r\n    page: 0,\r\n    sortColumn: null,\r\n    currentPageRows: [],\r\n    currentPageKey: [],\r\n    refresh: 0,\r\n  });\r\n  const [alertOpen, setAlertOpen] = useState({ isopen: false, errorMsg: \"\" });\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadDatTable();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadDatTable();\r\n  }, [refresh]);\r\n\r\n  const updateAlertState = (status: boolean, msg: string) => {\r\n    setAlertOpen({\r\n      isopen: status,\r\n      errorMsg: msg,\r\n    });\r\n  };\r\n\r\n  const setCurrentSortColumn = () => {\r\n    let sortEle = tableKeys.filter((tk) => {\r\n      return tk.sort === true && tk.sortActive === true;\r\n    });\r\n\r\n    setdtstate((prevState) => ({\r\n      ...prevState,\r\n      sortColumn: sortEle[0],\r\n    }));\r\n  };\r\n\r\n  const loadDatTable = () => {\r\n    setCurrentSortColumn();\r\n    if (remote !== true) {\r\n      setdtstate((prevState) => ({\r\n        ...prevState,\r\n        currentPageKey: tableKeys,\r\n        refresh: refresh,\r\n        page: 0,\r\n        rowsPerPage: 10,\r\n        currentPageRows: getPageData(0, 1, 10),\r\n      }));\r\n    } else {\r\n      // 'https://jsonplaceholder.typicode.com/users'\r\n\r\n      if (remoteUrl === \"\" || remoteUrl.trim() === \"\") return;\r\n\r\n      loadHttp(remoteUrl);\r\n    }\r\n  };\r\n\r\n  const loadHttp = (\r\n    remoteUrl: any,\r\n    pageNo = dtstate.page,\r\n    pageSize = dtstate.rowsPerPage\r\n  ) => {\r\n    setLoading(true);\r\n    let fnUrl = \"\";\r\n    if (remoteUrl.indexOf(\"?\") === -1) {\r\n      fnUrl = remoteUrl + \"?pgNo=\" + pageNo + \"&pgSize=\" + pageSize;\r\n    } else {\r\n      fnUrl = remoteUrl + \"&pgNo=\" + pageNo + \"&pgSize=\" + pageSize;\r\n    }\r\n\r\n    getHttp({ url: fnUrl }, false)\r\n      .then((e) => {\r\n        let remoteData = e;\r\n        if (dataRootKey && dataRootKey !== \"\") {\r\n          let keyEle = \"e.\" + dataRootKey;\r\n          remoteData = eval(keyEle);\r\n          console.log(remoteData);\r\n        }\r\n        setdtstate((prevState) => ({\r\n          ...prevState,\r\n          currentPageKey: tableKeys,\r\n          refresh: refresh,\r\n          page: 0,\r\n          rowsPerPage: 10,\r\n          currentPageRows: remoteData,\r\n        }));\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        updateAlertState(true, error);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const handleSort = (scol: any) => {\r\n    if (scol.id === dtstate.sortColumn.id) {\r\n      if (scol.dir === \"asc\") scol.dir = \"desc\";\r\n      else scol.dir = \"asc\";\r\n    } else {\r\n      scol.dir = \"asc\";\r\n    }\r\n    // setdtstate((prevState) => ({\r\n    //     ...prevState,\r\n    //     sortColumn: scol\r\n    // }));\r\n    let fnlUrl = null;\r\n    if (remoteUrl.indexOf(\"?\") === -1)\r\n      fnlUrl = remoteUrl + \"?sortCol=\" + scol.id + \"&sortOrder=\" + scol.dir;\r\n    else fnlUrl = remoteUrl + \"&sortCol=\" + scol.id + \"&sortOrder=\" + scol.dir;\r\n\r\n    loadHttp(fnlUrl, 1, 10);\r\n  };\r\n\r\n  const getTableHeadRow = ({ dk, index }: any) => {\r\n    // if (dk.type === COLUMN_TYPE_STRING)\r\n    return (\r\n      <StyledTableCell key={index} align=\"center\">\r\n        {dk.name}\r\n        {dk.sort === true && (\r\n          <TableSortLabel\r\n            key={index + 1}\r\n            className=\"table-sort-icon\"\r\n            active={dtstate.sortColumn.id === dk.id}\r\n            direction={\r\n              dtstate.sortColumn.id === dk.id ? dtstate.sortColumn.dir : \"asc\"\r\n            }\r\n            onClick={() => {\r\n              handleSort(dk);\r\n            }}\r\n          />\r\n        )}\r\n      </StyledTableCell>\r\n    );\r\n  };\r\n\r\n  const getPageData = (\r\n    currentPage: number,\r\n    nextPage: number,\r\n    rowsPerPage: number\r\n  ) => {\r\n    return tableData.slice(currentPage * rowsPerPage, nextPage * rowsPerPage);\r\n  };\r\n  const handleChangePage = (event: any, newpage: number) => {\r\n    if (remote !== true) {\r\n      setdtstate((prevState) => ({\r\n        ...prevState,\r\n        page: newpage,\r\n        currentPageRows: getPageData(newpage, newpage + 1, dtstate.rowsPerPage),\r\n      }));\r\n    } else {\r\n      setdtstate((prevState) => ({\r\n        ...prevState,\r\n        page: newpage,\r\n      }));\r\n      loadHttp(remoteUrl, newpage);\r\n    }\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: any) => {\r\n    if (remote !== true) {\r\n      setdtstate((prevState) => ({\r\n        ...prevState,\r\n        refresh: refresh,\r\n        page: 0,\r\n        rowsPerPage: event.target.value,\r\n        currentPageRows: getPageData(0, 1, event.target.value),\r\n      }));\r\n    } else {\r\n      let fnlUrl = remoteUrl + \"?pageNo=1&pageSize=\" + event.target.value;\r\n      loadHttp(fnlUrl);\r\n    }\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <AlertDialog\r\n        isopen={alertOpen.isopen}\r\n        message={alertOpen.errorMsg}\r\n        onClose={(e: any) => {\r\n          updateAlertState(false, \"\");\r\n        }}\r\n      />\r\n\r\n      {loading ||\r\n      (dtstate.currentPageRows && dtstate.currentPageRows.length > 0) ? (\r\n        <div className=\"main-table-div\">\r\n          {loading && <CircularProgress className=\"dtable-loader\" />}\r\n          {loading && <div className=\"dtable-overlay\"></div>}\r\n          <Paper style={{ padding: \"20px\", marginBottom: \"20px\" }}>\r\n            <TableContainer component={Paper}>\r\n              <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {dtstate.currentPageKey.map((dk: any, index) =>\r\n                      getTableHeadRow({ dk, index })\r\n                    )}\r\n                    {actions.length > 0 ? (\r\n                      <StyledTableCell\r\n                        style={{ width: \"120px\" }}\r\n                      ></StyledTableCell>\r\n                    ) : null}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {dtstate.currentPageRows.map((row, extIndex) => (\r\n                    <StyledTableRow key={extIndex}>\r\n                      {dtstate.currentPageKey.map((dk, index) =>\r\n                        getTableRow({ dk, row, index })\r\n                      )}\r\n                      {actions.length > 0 ? (\r\n                        <StyledTableCell\r\n                          align=\"right\"\r\n                          style={{ width: \"120px\" }}\r\n                        >\r\n                          {actions.map((act, x) => (\r\n                            <Tooltip\r\n                              key={x}\r\n                              title={act.tip}\r\n                              placement=\"top\"\r\n                              arrow\r\n                            >\r\n                              <IconButton\r\n                                key={x}\r\n                                style={{ padding: \"0px\" }}\r\n                                onClick={() => {\r\n                                  handleClick(row, extIndex, x, act);\r\n                                }}\r\n                              >\r\n                                {\r\n                                  <Icon style={{ color: act.color }}>\r\n                                    {act.icon}\r\n                                  </Icon>\r\n                                }\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          ))}\r\n                        </StyledTableCell>\r\n                      ) : null}\r\n                    </StyledTableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10]}\r\n              colSpan={3}\r\n              component=\"div\"\r\n              count={dtstate.currentPageRows.length}\r\n              rowsPerPage={dtstate.rowsPerPage}\r\n              page={dtstate.page}\r\n              backIconButtonProps={{ id: \"backId\" }}\r\n              onChangePage={handleChangePage}\r\n              nextIconButtonProps={{ id: \"nextId\" }}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(DataTable);\r\n","import React from \"react\";\r\nimport {\r\n  makeStyles,\r\n  withStyles,\r\n  createStyles,\r\n  Theme,\r\n} from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Button, IconButton, Icon, Tooltip, Checkbox } from \"@material-ui/core\";\r\nimport { TableProps } from \"./tableProps\";\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  })\r\n)(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  })\r\n)(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n});\r\n\r\nconst getTableRow = ({ dk, row, index }: any) => {\r\n  let rd = \"row.\" + dk.key;\r\n  let datastr = eval(rd);\r\n  if (dk.type === 0)\r\n    return (\r\n      <StyledTableCell key={index} align=\"center\">\r\n        {datastr}\r\n      </StyledTableCell>\r\n    );\r\n  else\r\n    return (\r\n      <StyledTableCell align=\"center\" key={index}>\r\n        {datastr}\r\n      </StyledTableCell>\r\n    );\r\n};\r\n\r\nconst getTableHeadRow = ({ dk, index }: any) => {\r\n  if (dk.type === 0)\r\n    return (\r\n      <StyledTableCell key={index} align=\"center\">\r\n        {dk.name}\r\n      </StyledTableCell>\r\n    );\r\n  else\r\n    return (\r\n      <StyledTableCell key={index} align=\"center\">\r\n        {dk.name}\r\n      </StyledTableCell>\r\n    );\r\n};\r\n\r\nconst NormalTable: React.FC<TableProps> = ({\r\n  tableData,\r\n  tableKeys,\r\n  actions,\r\n  handleClick,\r\n  chkbox,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      {tableData.length > 0 ? (\r\n        <div style={{ padding: \"20px\" }}>\r\n          <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {chkbox === true ? (\r\n                    <StyledTableCell\r\n                      style={{ width: \"10px\" }}\r\n                    ></StyledTableCell>\r\n                  ) : null}\r\n                  {tableKeys.map((dk: any, index) =>\r\n                    getTableHeadRow({ dk, index })\r\n                  )}\r\n                  {actions.length > 0 ? (\r\n                    <StyledTableCell\r\n                      style={{ width: \"120px\" }}\r\n                    ></StyledTableCell>\r\n                  ) : null}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {tableData.map((row, extIndex) => (\r\n                  <StyledTableRow key={extIndex} className=\"checkBox-col\">\r\n                    {chkbox === true ? (\r\n                      <StyledTableCell>\r\n                        <Checkbox\r\n                          checked={row.checked}\r\n                          onClick={(evnt: any) => {\r\n                            handleClick(row, extIndex, \"check\", evnt);\r\n                          }}\r\n                        />\r\n                      </StyledTableCell>\r\n                    ) : null}\r\n                    {tableKeys.map((dk, index) =>\r\n                      getTableRow({ dk, row, index })\r\n                    )}\r\n                    {actions.length > 0 ? (\r\n                      <StyledTableCell align=\"right\" className=\"actions-col\">\r\n                        {actions.map((act: any, indx) => (\r\n                          <Tooltip\r\n                            key={indx}\r\n                            title={act.tip}\r\n                            placement=\"top\"\r\n                            arrow\r\n                          >\r\n                            <IconButton\r\n                              key={indx}\r\n                              style={{ padding: \"0px\" }}\r\n                              onClick={() => {\r\n                                handleClick(row, extIndex, act);\r\n                              }}\r\n                            >\r\n                              {\r\n                                <>\r\n                                  <Icon style={{ color: act.color }}>\r\n                                    {act.icon}\r\n                                  </Icon>\r\n                                </>\r\n                              }\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        ))}\r\n                      </StyledTableCell>\r\n                    ) : null}\r\n                  </StyledTableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(NormalTable);\r\n","import React, { useState } from 'react';\r\nimport DataTable from '../../lib/components/table/DataTable';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport TextInput from '../../lib/components/txtinput/textInput';\r\nimport NormalTable from '../../lib/components/table/NormalTable';\r\nimport { COLUMN_TYPE_STRING, COLUMN_TYPE_NUMBER, CONFIRM_DIALOG } from '../../lib/common/Constants';\r\nimport { getHttp } from '../../lib/common/HttpService';\r\nimport AppButton from '../../lib/components/buttons/appButton';\r\nimport FormContainer from '../../lib/components/formContainer/formContainer';\r\nimport { OTHER_POPUP, NO_DIALOG } from '../../lib/common/Constants';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ConfirmDialog from '../../lib/components/dialog/confirmDialog';\r\nimport * as endpointContants from '../../utils/ptmsEndpoints';\r\nimport { postHttp } from '../../lib/common/HttpService';\r\n\r\n\r\nconst truckAggreagatorCol = [\r\n    { name: \"Code\", type: COLUMN_TYPE_NUMBER, key: \"code\", id: 1, sort: true },\r\n    { name: \"Name\", type: COLUMN_TYPE_STRING, key: \"truckAggregatorLocales.name\", id: 2, sort: true },\r\n    { name: \"Description\", type: COLUMN_TYPE_STRING, key: \"truckAggregatorLocales.description\", id: 3 },\r\n    { name: \"Created Date\", type: COLUMN_TYPE_STRING, key: \"creationDate\", id: 4, sort: true, sortActive: true },\r\n    { name: \"Active\", type: COLUMN_TYPE_STRING, key: \"isActive\", id: 5 }\r\n];\r\n\r\nlet truckForm = {\r\n    code: '',\r\n    name: ''\r\n};\r\nlet remoteBaseUrl = \"/ptms/app/api/secure/truckAggregator/search\";\r\n\r\n\r\n\r\nconst actions = [\r\n    { item: 1, tip: 'view', icon: 'view_headline' },\r\n    { item: 2, tip: 'edit', icon: 'edit_headline' },\r\n    { item: 3, tip: 'delete', icon: 'delete_headline' }\r\n\r\n];\r\nlet actionIndex = 0;\r\nlet truckAggregatorCode = \"\";\r\n\r\n//let history = useHistory();\r\nfunction ManageTruckAggregator() {\r\n    const [showPopup, setShowPopup] = useState(NO_DIALOG);\r\n    const [pstate, setPstate] = useState(0);\r\n    const [remoteUrl, setRemoteURl] = useState(remoteBaseUrl);\r\n    const [formvalues, setFormvalues] = useState(truckForm);\r\n    let fmk;\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Formik initialValues={formvalues}>\r\n            {\r\n                formik => {\r\n                    fmk = formik;\r\n                    return (\r\n                        <>\r\n                            {/* <DebugForm f={fmk.values} /> */}\r\n                            <FormContainer title=\"Page Header\">\r\n                                <Form autoComplete=\"off\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-md\">\r\n                                            <TextInput label=\"Code\" name={\"code\"} id={\"code\"} helperText=\"Search by code\" />\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md\">\r\n                                            <TextInput label=\"Description\" name={\"name\"} id={\"name\"} helperText=\"Search by description\" />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row button-holder\">\r\n                                        <div className=\"col\">\r\n                                            <AppButton text={\"Reset\"} type={\"button\"} icon=\"refresh\" handleClick={() => {\r\n                                                fmk.resetForm();\r\n                                                setPstate(pstate + 1);\r\n                                                let finalURL = remoteBaseUrl;\r\n                                                setRemoteURl(finalURL);\r\n                                            }}></AppButton>\r\n\r\n                                            <AppButton text={\"Search\"} type={\"button\"} icon=\"search\" handleClick={() => {\r\n                                                setPstate(pstate + 1);\r\n                                                let finalURL = remoteUrl + \"?code=\" + formik.values.code\r\n                                                    + \"&name=\" + formik.values.name\r\n                                                setRemoteURl(finalURL);\r\n                                            }}></AppButton>\r\n\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <DataTable refresh={pstate} tableKeys={truckAggreagatorCol} remote={true} remoteUrl={remoteUrl} dataRootKey={\"elements\"}\r\n                                                actions={actions} handleClick={(row, index, action, element) => {\r\n                                                    console.log(row.code);\r\n                                                    console.log(index);\r\n                                                    console.log(action);\r\n                                                    console.log(element);\r\n                                                    actionIndex = element.item;\r\n                                                    truckAggregatorCode = row.code;\r\n                                                    setShowPopup(CONFIRM_DIALOG);\r\n                                                }} />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <ConfirmDialog isopen={showPopup === CONFIRM_DIALOG} onClose={(e) => {\r\n                                        setShowPopup(NO_DIALOG);\r\n                                    }} onConfirm={(e) => {\r\n                                        console.log(e);\r\n                                        if (actionIndex === 3) {\r\n                                            const remoteUrl = endpointContants.deleteTruckAggregrator + \"/\" + truckAggregatorCode;\r\n                                            let obj = {\r\n                                                url: remoteUrl,\r\n                                                body: { truckAggCode: truckAggregatorCode }\r\n                                            };\r\n                                            postHttp(obj, true).then(response => {\r\n\r\n                                                setPstate(pstate + 1);\r\n                                            })\r\n                                                .catch(error => {\r\n                                                    // const errMsg = error.message;\r\n                                                    // dispatch(fetchUserFailure(errMsg));\r\n                                                })\r\n                                        }\r\n                                        setShowPopup(NO_DIALOG);\r\n\r\n                                    }}\r\n                                    >\r\n                                        Do you want to delete the Truck Aggregator?\r\n                                        </ConfirmDialog>\r\n                                </Form>\r\n                            </FormContainer>\r\n                        </>\r\n                    )\r\n                }\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default ManageTruckAggregator\r\n"],"sourceRoot":""}