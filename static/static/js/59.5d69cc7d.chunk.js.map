{"version":3,"sources":["lib/components/dialog/confirmDialog.js","lib/components/autocomplete/appAutoCompleteAsyc.tsx","service/AssignTruckAndDriverService.js","components/transporter/JobConfirmationPopUp.js","lib/components/autocomplete/appautocomplete.tsx","components/transporter/AssignTrucksSubForm.js","components/transporter/AssignTrucks.js"],"names":["React","memo","props","title","onClose","children","closeTxt","confirmTxt","onConfirm","isConfirm","isopen","closeIcon","openIcon","closeButtonCss","confirmButtonCss","AppAutoCompleteAsyc","options","required","name","label","helperText","type","remoteUrl","kvMapping","onSelect","useState","q","timerId","dataset","opts","setOpts","loading","setLoading","refresh","setRefresh","renders","useRef","intializeList","length","ds","map","opt","labEle","labelv","eval","valEle","value","val","console","log","useEffect","form","field","meta","setFieldValue","autocompleteSearch","qurl","indexOf","getHttp","url","then","e","dItems","ele","prevState","catch","error","eitems","handleChange","event","option","target","onKeyPressInput","reason","clearTimeout","setTimeout","handleClose","freeSolo","autoComplete","renderOption","variant","getOptionLabel","getOptionSelected","onChange","onInputChange","renderInput","params","className","margin","InputLabelProps","style","fontSize","AssignTruckAndDriverService","containerData","obj","endpointContants","body","postHttp","transporter","jobList","DialogTitle","withStyles","theme","root","padding","spacing","closeButton","position","right","top","color","classes","aria-label","onClick","DialogContent","textAlign","MuiDialogContent","JobConfirmationPopUp","open","setOpen","history","useHistory","aria-labelledby","id","src","fontWeight","push","tabSelected","AppAutoComplete","reload","placeholder","autoHighlight","width","item","truckForm","input","borderRadius","backgroundColor","palette","background","paper","border","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","truck","AssignTrucksSubForm","truckOptions","truckNumber","setTruckNumber","formvalues","truckKVmapping","truckUrl","initialValues","enableReinitialize","formik","Table","marginLeft","TableBody","TableRow","Paper","marginTop","TableCell","Grid","container_number","iso_code","pickupLocation","dropZone","borderRight","deliveryDate","onTruckSelect","useStyles","makeStyles","clickableIcon","cancelButton","textTransform","float","confirmButton","AssignTrucks","location","useLocation","state","setContainerData","searchValue","setSearchValue","containerList","setContainerList","containersUnassigned","setContainersUnassigned","NO_DIALOG","showPopup","setShowPopup","showConfirmation","setShowConfirmation","ALERT_DIALOG","InputLabel","Button","disabled","height","container","direction","alignItems","xs","sm","TextField","fullWidth","search","filter","index","key","containerNumber","find","x","ind","findIndex","updateContainerList","groupAndSendForApproval","requestContainerList","response","isAxiosError","Error","status"],"mappings":"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","file":"static/js/59.5d69cc7d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { AppDialog } from './dialogBox'\r\n\r\nfunction ConfirmDialog(props) {\r\n    return (\r\n        <div>\r\n            <AppDialog title={props.title} onClose={props.onClose} children={props.children} closeTxt={props.closeTxt}\r\n                confirmTxt={props.confirmTxt} onConfirm={props.onConfirm} isConfirm={true} isopen={props.isopen}\r\n                closeIcon={props.closeIcon} openIcon={props.openIcon} closeButtonCss={props.closeButtonCss} confirmButtonCss={props.confirmButtonCss}>\r\n                {props.children}\r\n            </AppDialog>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(ConfirmDialog);\r\n","import React, { useEffect, Fragment, useState } from 'react';\r\nimport { Field, useField, FieldAttributes, FastField, FieldProps } from \"formik\";\r\nimport { ElementInputProps, LabelValue } from '../../common/ElementInputProps';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { TextField, CircularProgress ,Typography} from '@material-ui/core';\r\nimport './autocomplete.css';\r\nimport { getHttp } from '../../common/HttpService';\r\nimport { propTypes } from 'react-bootstrap/esm/Image';\r\n\r\n\r\n\r\n\r\ntype MySelectFieldProps =\r\n    {\r\n        options?: LabelValue[],\r\n        remoteUrl?: string,\r\n        reload?: number,\r\n        kvMapping?: any,\r\n        onSelect?:any\r\n    } & ElementInputProps & FieldAttributes<{}>\r\n\r\n\r\nconst AppAutoCompleteAsyc: React.FC<MySelectFieldProps> = ({ options, required = false, name,\r\n    label, helperText, type = \"text\", remoteUrl, kvMapping,onSelect }) => {\r\n    const [opts, setOpts] = useState({ q: '', timerId: null, dataset: [] });\r\n    const [loading, setLoading] = useState(false);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const renders = React.useRef(0);\r\n\r\n\r\n    const intializeList = () => {\r\n        if (options && options.length > 0) {\r\n            let ds: any = options;\r\n            if (kvMapping) {\r\n                ds = options.map((opt) => {\r\n                    let labEle = 'opt.' + kvMapping.label;\r\n                    let labelv = eval(labEle);\r\n                    let valEle = 'opt.' + kvMapping.value;\r\n                    let val = eval(valEle);\r\n                    return { label: labelv, value: val }\r\n                })\r\n            }\r\n            setOpts({\r\n                q: '',\r\n                dataset: ds,\r\n                timerId: null\r\n            })\r\n\r\n            console.log(ds);\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        // if (options && options.length > 0) {\r\n        //     setOpts({\r\n        //         q: '',\r\n        //         dataset: options,\r\n        //         timerId: null\r\n        //     })\r\n        // }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Field name={name}>\r\n                {\r\n                    ({ form, field, meta }: FieldProps) => {\r\n                        const { setFieldValue } = form;\r\n\r\n                        let timerId: any = null;\r\n\r\n                        const autocompleteSearch = (value: any) => {\r\n                            setLoading(true);\r\n                            let qurl;\r\n\r\n                            if (remoteUrl.indexOf('?') === -1) {\r\n                               qurl = remoteUrl + '?q=' + `${value}`;\r\n                            } else {\r\n                                \r\n                                 qurl = remoteUrl + '&q=' + `${value}`;\r\n                            }\r\n                         \r\n                            \r\n                         \r\n                            console.log(\"url::::\", qurl);\r\n                            getHttp({ url: qurl }, false).then(e => {\r\n                                let dItems: any = [];\r\n                                console.log(e);\r\n                                dItems = e.map((ele: any) => {\r\n                                    let labEle = 'ele.' + kvMapping.label;\r\n                                    let labelv = eval(labEle);\r\n                                    let valEle = 'ele.' + kvMapping.value;\r\n                                    let val = eval(valEle);\r\n                                    return { label: labelv, value: val }\r\n                                });\r\n                                console.log(dItems);\r\n                                setOpts((prevState) => ({\r\n                                    ...prevState,\r\n                                    dataset: dItems\r\n                                }));\r\n                                setLoading(false);\r\n\r\n                            }).catch(error => {\r\n                                setLoading(false);\r\n                                let eitems = [{ label: 'Unable to Fetch the data: ' + error, value: '-3333' }]\r\n                                setOpts((prevState) => ({\r\n                                    ...prevState,\r\n                                    dataset: eitems\r\n                                }));\r\n                            })\r\n                        };\r\n\r\n\r\n\r\n\r\n                        const handleChange = (event: any, option: LabelValue) => {\r\n                            setRefresh(true);\r\n                            if (option != null) {\r\n                                setFieldValue(name, option.value);\r\n                                onSelect(name, option.value,option.label);\r\n                            }\r\n                            else {\r\n                                event.target.value = '';\r\n                                setFieldValue(name, '');\r\n                                onSelect(name, '','');\r\n                            }\r\n                            \r\n                        }\r\n\r\n                        const onKeyPressInput = (event: any, value: string, reason: string) => {\r\n                            if (event.type === 'click') {\r\n                                return;\r\n                            }\r\n                            setRefresh(true);\r\n\r\n                            if (remoteUrl && value !== '') {\r\n                                clearTimeout(opts.timerId);\r\n\r\n                                timerId = setTimeout(() => {\r\n                                    autocompleteSearch(value)\r\n                                }, 200);\r\n                                setOpts((prevState) => ({\r\n                                    ...prevState,\r\n                                    q: value,\r\n                                    timerId: timerId\r\n                                }));\r\n\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                        const handleClose = (event: any, reason: any) => {\r\n\r\n                            if (remoteUrl) {\r\n                                setOpts((prevState) => ({\r\n                                    ...prevState,\r\n                                    dataset: []\r\n                                }));\r\n                            }\r\n                            console.log('closing');\r\n                            setRefresh(false);\r\n\r\n\r\n                        }\r\n\r\n                        return (\r\n\r\n                            <>\r\n                                {/* <div>renders:{renders.current++}</div> */}\r\n\r\n                                <Autocomplete\r\n                                    freeSolo\r\n                                    autoComplete={false}\r\n                                    options={opts.dataset}\r\n                                    renderOption={(option) => (\r\n                                        <Typography variant=\"body2\">{option.label}</Typography>\r\n                                      )}\r\n                                    getOptionLabel={(option: LabelValue) => option.label}\r\n                                    getOptionSelected={(option: LabelValue, value: any) => {\r\n                                        return true;\r\n                                    }}\r\n                                    \r\n                                    onChange={handleChange}\r\n                                    onInputChange={onKeyPressInput}\r\n                                    onClose={handleClose}\r\n                                    renderInput={(params: any) => {\r\n                                        return (<>\r\n                                            <div className=\"autoSelect-txt-div\">\r\n                                                <TextField autoComplete=\"false\"   {...params} label={label}  variant=\"outlined\"\r\n                                                 margin=\"dense\"   InputLabelProps={{\r\n                                                    style:{\r\n                                                     fontSize: '16px',   \r\n                                                    }}}\r\n                                            \r\n                                                   \r\n                                                />\r\n                                                {loading && <CircularProgress className=\"auto-search-loading-icon\" />}\r\n                                            </div>\r\n                                        </>)\r\n                                    }}\r\n                                    \r\n                                />\r\n                            </>\r\n                        )\r\n                    }\r\n                }\r\n            </Field>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(AppAutoCompleteAsyc);","import { postHttp } from '../lib/common/HttpService';\r\nimport * as endpointContants from '../utils/ptmsEndpoints';\r\nimport { getHttp } from '../lib/common/HttpService';\r\nimport { checkForExistingTrip } from './../utils/ptmsEndpoints';\r\n\r\n\r\n\r\nclass AssignTruckAndDriverService {\r\n\r\n    groupAndSendForApproval(containerData) {\r\n\r\n        const remoteUrl = endpointContants.groupAndSendForApproval ;\r\n\r\n        let obj =  { url: remoteUrl ,\r\n            body:containerData\r\n         };\r\n\r\n       return  postHttp(obj, true).catch(error => {\r\n    \r\n        return error;\r\n       });\r\n               \r\n    }\r\n    \r\n    fetchTrucksForUserTypes()\r\n    {\r\n        const remoteUrl =`${endpointContants.fetchTruckByUserTypes}`;\r\n\r\n       // const remoteUrl = '${endpointContants.fetchTrucksForTransporter}?transporterCode=${transporterCode}&vehicleType=${vehicleType}';\r\n     \r\n\r\n\r\n        let obj = { url: remoteUrl };\r\n\r\n\r\n       return getHttp(obj, false);\r\n           \r\n\r\n    }\r\n\r\n    fetchTrucksForTransporter(transporter)\r\n    {\r\n        const remoteUrl =`${endpointContants.fetchTrucksForTransporter}?transporter=${transporter}`;\r\n\r\n       // const remoteUrl = '${endpointContants.fetchTrucksForTransporter}?transporterCode=${transporterCode}&vehicleType=${vehicleType}';\r\n     \r\n\r\n\r\n        let obj = { url: remoteUrl };\r\n\r\n\r\n       return getHttp(obj, false);\r\n           \r\n\r\n    }\r\n\r\n    sendJobForApproval(jobList)\r\n    {\r\n        const remoteUrl = endpointContants.sendJobsForApproval ;\r\n\r\n        let obj =  { url: remoteUrl ,\r\n            body:jobList\r\n         };\r\n\r\n       return  postHttp(obj, true).catch(error => {\r\n    \r\n        return error;\r\n       });\r\n    }\r\n\r\n\r\n    fetchTransporters()\r\n    {\r\n        const remoteUrl = endpointContants.fetchTransporters ;\r\n\r\n        let obj =  { url: remoteUrl };\r\n\r\n       return  getHttp(obj, false).catch(error => {\r\n    \r\n        return error;\r\n       });\r\n    }\r\n\r\n\r\n           \r\n\r\n    }\r\n\r\n\r\nexport default new AssignTruckAndDriverService()","import React,{useState} from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Link from '@material-ui/core/Link';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst styles = (theme) => ({\r\n\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n        \r\n            \r\n      },\r\n\r\n  closeButton: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: \"red\"\r\n    },\r\n   \r\n});\r\n\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    // <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n    //   <Typography variant=\"h6\">{children}</Typography>\r\n     \r\n        <IconButton\r\n          aria-label=\"close\"\r\n          className={classes.closeButton}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) \r\n    // </MuiDialogTitle>\r\n \r\n});\r\n\r\nconst DialogContent = withStyles(() => ({\r\n  root: {\r\n    textAlign:'center'\r\n   \r\n  }\r\n}))(MuiDialogContent);\r\n\r\n\r\n\r\nexport default function JobConfirmationPopUp(props) {\r\n \r\n    const [open, setOpen] = React.useState(true);\r\n    let history = useHistory();\r\n   const[jobList,setJobList]= useState(props.jobList)\r\n    \r\n    const handleClose = () => {\r\n      props.onClose();\r\n      setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n     \r\n      <Dialog \r\n  \r\n        onClose={handleClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={open}\r\n      >\r\n        <DialogTitle\r\n          id=\"customized-dialog-title\"\r\n          onClose={handleClose}\r\n        ></DialogTitle>\r\n        <DialogContent>\r\n        <img src=\"./success.svg\"  />\r\n       <p style={{color:\"#609E2E\",fontSize:\"25px\"}}>Confirmed</p>\r\n    \r\n       <div style={{color:\"black\",fontWeight:\"bold\"}}>\r\n           <div > Approval Request has been successfully sent to DT Admin</div>\r\n           <div> You will be notified once it gets approved</div>\r\n           <br/>\r\n       \r\n       </div>\r\n       {/* <div > \r\n       <div style={{color:\"grey\"}}>Kindly note the numbers for any future communications</div>\r\n         {jobList.map(job => (\r\n            <>\r\n             <div style={{color:\"black\",fontWeight:\"bold\"}} key={job}>Job Number #{job}</div>\r\n           \r\n             </>\r\n        ))}  \r\n       </div>  */}\r\n   \r\n   <p style={{color:\"grey\"}}>View the jobs in  <Link color=\"secondary\" onClick={  ()=>history.push(\"/myJobs\",{tabSelected:1})\r\n     }> Pending Jobs </Link> </p>\r\n     <p style={{color:\"grey\"}}>Check the approval status in  <Link color=\"secondary\" onClick={\r\n         ()=>history.push(\"/myJobs\",{tabSelected:2})\r\n     }> Active Jobs </Link>  page  and start job </p>\r\n        </DialogContent>\r\n       \r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React, { useEffect, Fragment, useState } from 'react';\r\nimport { Field, useField, FieldAttributes, FastField, FieldProps } from \"formik\";\r\nimport { ElementInputProps, LabelValue } from '../../common/ElementInputProps';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { TextField, CircularProgress } from '@material-ui/core';\r\nimport './autocomplete.css';\r\nimport { getHttp } from '../../common/HttpService';\r\n\r\n\r\ntype MySelectFieldProps =\r\n    {\r\n        options?: LabelValue[],\r\n        remoteUrl?: string,\r\n        reload?: number,\r\n        kvMapping?: any\r\n    } & ElementInputProps & FieldAttributes<{}>\r\n\r\n\r\nconst AppAutoComplete: React.FC<MySelectFieldProps> = ({ options, required = false, name,\r\n    label, reload, kvMapping }) => {\r\n    const [opts, setOpts] = useState({ q: '', timerId: null, dataset: [] });\r\n    const renders = React.useRef(0);\r\n\r\n    const intializeList = () => {\r\n        if (options && options.length > 0) {\r\n            let ds: any = options;\r\n            if (kvMapping) {\r\n                ds = options.map((opt) => {\r\n                    let labEle = 'opt.' + kvMapping.label;\r\n                    let labelv = eval(labEle);\r\n                    let valEle = 'opt.' + kvMapping.value;\r\n                    let val = eval(valEle);\r\n                    return { label: labelv, value: val }\r\n                })\r\n            }\r\n            setOpts({\r\n                q: '',\r\n                dataset: ds,\r\n                timerId: null\r\n            })\r\n\r\n            console.log(ds);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        intializeList();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        intializeList();\r\n    }, [reload])\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Field name={name}>\r\n                {\r\n                    ({ form, field, meta }: FieldProps) => {\r\n                        const { setFieldValue } = form;\r\n\r\n                        return (\r\n\r\n                            <>\r\n                                {/* <div>renders:{renders.current++}</div> */}\r\n                                <Autocomplete\r\n                                    value={field.value}\r\n                                    placeholder={label}\r\n                                    autoHighlight\r\n                                    options={opts.dataset}\r\n                                    getOptionLabel={(option) => option ? option.label : ''}\r\n                                    getOptionSelected={(option: LabelValue, value: any) => {\r\n                                        return value.value === option.value\r\n                                    }}\r\n                                    // renderOption={(opt, stat) => {\r\n                                    //     console.log(opt)\r\n                                    //     return <>carren</>\r\n                                    // }}\r\n                                    style={{ width: 300 }}\r\n                                    onChange={(e, item) => item ? setFieldValue(name, item) : setFieldValue(name, '')}\r\n                                    renderInput={(params) => <TextField {...params} label={label} />}\r\n                                />\r\n\r\n                            </>\r\n                        )\r\n                    }\r\n                }\r\n            </Field>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(AppAutoComplete);","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  Paper,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Grid,\r\n  InputLabel,\r\n  TextField\r\n} from \"@material-ui/core\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport {  withStyles } from \"@material-ui/core/styles\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { Formik, Form } from \"formik\";\r\nimport AppAutoComplete from \"../../lib/components/autocomplete/appautocomplete\";\r\nimport AppAutoCompleteAsyc from \"../../lib/components/autocomplete/appAutoCompleteAsyc\";\r\nimport * as endpointContants from \"../../utils/ptmsEndpoints\";\r\n\r\nlet fmk;\r\n\r\nconst BootstrapInput = withStyles((theme) => ({\r\n   root: {\r\n    \r\n   \r\n\r\n   },\r\n  input: {\r\n    borderRadius: 4,\r\n    position: \"relative\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"1px solid #ced4da\",\r\n    width: 300,\r\n    fontSize: 15,\r\n    padding: \"26px 15px 5px  20px\",\r\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n    // Use the system font instead of the default Roboto font.\r\n    fontFamily: ['\"Segoe UI Regular\"'].join(\",\"),\r\n    \"&:focus\": {\r\n      borderRadius: 4,\r\n      borderColor: \"grey\",\r\n      boxShadow: \"0 0 0 0rem \",\r\n    },\r\n    color: \"grey\",\r\n   \r\n  }\r\n\r\n}))(InputBase);\r\n\r\nconst truckForm = {\r\ntruck:\"\"\r\n};\r\n\r\nexport default function AssignTrucksSubForm(props) {\r\n  const [containerData, setContainerData] = useState(props.containerData);\r\n  const [truckOptions, setTruckOptions] = useState(props.truckOptions);\r\n  const [truckNumber, setTruckNumber] = useState(props.truckNumber);\r\n  const [formvalues] = useState(truckForm);\r\n  console.log(\"truckOptions in child\", truckOptions);\r\n\r\n  const truckKVmapping = { label: \"label\", value: \"value\" };\r\n  let transporter = \"\";\r\n  const truckUrl = `${endpointContants.fetchTrucksForTransporter}?transporter=${transporter}`;\r\n\r\n  const vehicleOptions = [\r\n    { label: \"None\", value: \"None\" },\r\n    { label: \"Sedan\", value: \"Sedan\" },\r\n    { label: \"SUV\", value: \"Suv\" },\r\n  ];\r\n\r\n  const onTruckSelect = (value) => {\r\n    console.log(\"truck selected\", value);\r\n      setTruckNumber(value);\r\n    props.onTruckSelect(value, containerData.container_number);\r\n\r\n  };\r\n\r\n  return (\r\n    <Formik initialValues={formvalues} enableReinitialize>\r\n    {(formik) => {\r\n      fmk = formik;\r\n      return (\r\n        <>\r\n           <Form autoComplete=\"off\">\r\n      {/* <Grid container direction=\"row\" spacing={1} alignItems=\"flex-start\">\r\n        <Grid item > */}\r\n          <Table style={{ width: \"100%\", marginLeft: \"12px\" }}>\r\n            <TableBody>\r\n              {/* {containerSummary.containerInfo.map((container, ind) => ( */}\r\n              <TableRow>\r\n                <Paper variant=\"outlined\" style={{ marginTop: \"5px\" }}>\r\n                  <TableCell\r\n                    style={{\r\n                     \r\n                      color: \"grey\",\r\n                      width: \"180px\",\r\n                     \r\n                    }}\r\n                  >\r\n                       <Grid item style={{ fontSize: \"18px\", fontWeight: \"bold\",color:\"black\"}}> {containerData.container_number}</Grid>\r\n                       <Grid item style={{ fontSize: \"13px\"}}> {containerData.iso_code}</Grid>\r\n                  </TableCell>\r\n                  <TableCell \r\n                   style={{\r\n                    fontSize: \"13px\",\r\n                    width: \"400px\",\r\n                    color:\"black\",\r\n                    fontWeight:\"bold\"\r\n                   \r\n                  \r\n                   }}\r\n                  >\r\n                   \r\n                   <img src=\"./location-pin.svg\"  />\r\n                   \r\n                  {containerData.pickupLocation}\r\n\r\n                   <img src=\"./toFrom.svg\"  />\r\n\r\n                   <img src=\"./location-pin.svg\"  />\r\n\r\n                   {containerData.dropZone}\r\n                    \r\n                  </TableCell>\r\n                 \r\n                 \r\n                  <TableCell\r\n                    style={{\r\n                      fontSize: \"13px\",\r\n                      color: \"grey\",\r\n                      width: \"180px\",\r\n                      borderRight: \"1px solid #D3D3D3\" \r\n                    }}\r\n                  >\r\n                    <Grid item style={{color: \"grey\" ,fontSize: \"13px\" }}>\r\n                      Date & Time\r\n                    </Grid>\r\n                    <Grid item style={{fontWeight:\"bold\" ,color:\"black\",fontSize: \"13px\" }}>{containerData.deliveryDate}</Grid>\r\n                  </TableCell>\r\n                  <TableCell  style={{\r\n                   \r\n                    width: \"300px\",\r\n                  \r\n                   \r\n                  \r\n                   }}>\r\n                  {/* <FormControl style={{ marginTop: \"3px\" }}>\r\n                  <InputLabel htmlFor=\"demo-customized-select-label\">\r\n                    Searchable Dropdown values\r\n                  </InputLabel>\r\n                  <NativeSelect\r\n                    value={truckNumber}\r\n                    labelId=\"demo-customized-select-label\"\r\n                    id=\"demo-customized-select\"\r\n                    input={<BootstrapInput />}\r\n                    onChange={(e) => onTruckSelect(e)}\r\n                  >\r\n                    {truckOptions.map((option, i) => {\r\n                      return (\r\n                        <option value={option.value} key={i}>\r\n                          {option.label}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </NativeSelect>\r\n                </FormControl> */}\r\n                {/* <Autocomplete\r\n                            id=\"combo-box-demo\"\r\n                            options={truckOptions}\r\n                            getOptionLabel={(option) => option.label}\r\n                            style={{ width: 150 }}\r\n                            renderInput={(params) => <TextField {...params} label=\"\" variant=\"outlined\" />}\r\n                            onChange={(e,value) => {\r\n                              onTruckSelect(value);\r\n                                    }}\r\n                          /> */}\r\n                       <AppAutoCompleteAsyc\r\n                        name={\"truck\"}\r\n                        label=\"Search by truck number\"\r\n                        style={{ marginTop: \"2px\" }}\r\n                        kvMapping={truckKVmapping}\r\n                        remoteUrl={truckUrl}\r\n                       \r\n                        onSelect={(e,value,label) => {\r\n                          console.log(\"truck selected new\",e,\"value::\",value,\"label::\",label)\r\n                          onTruckSelect(value)\r\n                        }}\r\n                          options = {truckOptions}\r\n                       \r\n                          />\r\n\r\n                  </TableCell>\r\n                </Paper>\r\n              </TableRow>\r\n              {/* ))} */}\r\n            </TableBody>\r\n          </Table>\r\n        {/* </Grid> */}\r\n        {/* <Grid item>\r\n          <Table style={{ width: \"300px\" }}>\r\n            <TableBody>\r\n              <TableRow>\r\n                <FormControl style={{ marginTop: \"3px\" }}>\r\n                  <InputLabel htmlFor=\"demo-customized-select-label\">\r\n                    Searchable Dropdown values\r\n                  </InputLabel>\r\n                  <NativeSelect\r\n                    value={truckNumber}\r\n                    labelId=\"demo-customized-select-label\"\r\n                    id=\"demo-customized-select\"\r\n                    input={<BootstrapInput />}\r\n                    onChange={(e) => onTruckSelect(e)}\r\n                  >\r\n                    {truckOptions.map((option, i) => {\r\n                      return (\r\n                        <option value={option.value} key={i}>\r\n                          {option.label}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </NativeSelect>\r\n                </FormControl>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </Grid> */}\r\n            {/* </Grid> */}\r\n            </Form>\r\n        </>\r\n      \r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Grid, InputLabel } from \"@material-ui/core\";\r\n\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport AssignTrucksSubForm from \"./AssignTrucksSubForm\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport AssignTruckAndDriverService from \"../../service/AssignTruckAndDriverService\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ConfirmDialog from \"../../lib/components/dialog/confirmDialog\";\r\nimport { NO_DIALOG, ALERT_DIALOG } from \"../../lib/common/Constants\";\r\nimport JobConfirmationPopUp from \"./JobConfirmationPopUp\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  clickableIcon: {\r\n    color: \"grey\",\r\n    \"&:hover\": {\r\n      color: \"red\",\r\n    },\r\n  },\r\n  cancelButton: {\r\n    background: \"#dc4e4e\",\r\n    color: \"#fff\",\r\n    textTransform: \"none\",\r\n    float:\"center\"\r\n   \r\n  },\r\n  confirmButton: {\r\n    background: \"#4CAB5B\",\r\n    color: \"#fff\",\r\n    textTransform: \"none\",\r\n    float:\"center\"\r\n    \r\n  },\r\n}));\r\n\r\n\r\n\r\nexport default function AssignTrucks() {\r\n  const location = useLocation();\r\n  const [containerData, setContainerData] = useState(\r\n    location.state.containerData\r\n  );\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  \r\n  const [truckList, setTruckList] = useState([]);\r\n  const [containerList, setContainerList] = useState([]);\r\n  const [containersUnassigned, setContainersUnassigned] = useState(\r\n    location.state.containerData.length\r\n  );\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const [showPopup, setShowPopup] = useState(NO_DIALOG);\r\n  const [showConfirmation, setShowConfirmation] = useState(NO_DIALOG);\r\n\r\n \r\n\r\n  const updateContainerList = (e,containerNumber) => {\r\n    console.log(\"containers unassigned \", containersUnassigned);\r\n\r\n     var container=containerList.find(x=>{return x.container_number===containerNumber})\r\n\r\n    if (container.truckNumber) {\r\n      if (e === \"\") setContainersUnassigned(containersUnassigned + 1);\r\n    } else {\r\n      if (e) setContainersUnassigned(containersUnassigned - 1);\r\n    }\r\n    var ind=containerList.findIndex(x=>x.container_number===containerNumber)\r\n    containerList[ind].truckNumber = e;\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"containers unassigned \", containersUnassigned);\r\n    setContainerList(containerData);\r\n    // const loadTrucks = async () => {\r\n    //   let transporterCode=\"\";\r\n    //   AssignTruckAndDriverService.fetchTrucksForTransporter(transporterCode)\r\n    //     .then((response) => {\r\n    //       if (response.isAxiosError) {\r\n    //         setTruckList([]);\r\n    //       }\r\n    //       else\r\n         \r\n    //       setTruckList(response);\r\n         \r\n    //     })\r\n    //     .catch(() => {\r\n    //       console.log(\"error\");\r\n    //     });\r\n    // };\r\n\r\n    // loadTrucks();\r\n  }, []);\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n   \r\n{showConfirmation === ALERT_DIALOG &&  \r\n<JobConfirmationPopUp\r\n                      \r\n                       onClose={(e) => {\r\n                        setShowConfirmation(NO_DIALOG);\r\n                        history.push(\"/myJobs\",{tabSelected:1})\r\n                    }} \r\n                    \r\n                   />}\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          {containersUnassigned !== 0 && (\r\n            <InputLabel\r\n              style={{ fontSize: \"20px\", marginTop: \"30px\", color: \"black\" ,fontWeight:\"bold\"}}\r\n            >\r\n              <span>Assign Trucks </span>\r\n              <span style={{ fontSize: \"15px\", color: \"black\" }}>\r\n                ({containersUnassigned} containers unassigned)\r\n              </span>\r\n            </InputLabel>\r\n          )}\r\n          {containersUnassigned === 0 && (\r\n            <InputLabel\r\n              style={{ fontSize: \"20px\", marginTop: \"30px\", color: \"black\" }}\r\n            >\r\n              <span>Assign Trucks </span>\r\n              <span style={{ fontSize: \"15px\", color: \"black\" }}>\r\n                ({containerData.length} containers assigned)\r\n              </span>\r\n            </InputLabel>\r\n          )}\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            style={{ float: \"right\", marginTop: \"20px\" }}\r\n            disabled={containersUnassigned !== 0}\r\n            className=\"float-right\"\r\n            onClick={() => {\r\n              setShowPopup(ALERT_DIALOG);\r\n             \r\n            }}\r\n          >\r\n            Continue\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <hr\r\n        style={{ backgroundColor: \"#D3D3D3\", border: \"0px\", height: \"1px\" }}\r\n      ></hr>\r\n      <Grid container direction=\"row\" spacing={1} alignItems=\"flex-start\">\r\n        <Grid item xs={10} sm={8}>\r\n          <Grid\r\n            container\r\n            spacing={1}\r\n            alignItems=\"flex-end\"\r\n            style={{ marginLeft: \"12px\" }}\r\n          >\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                id=\"input-with-icon-grid\"\r\n                label=\"Search with container number\"\r\n                InputLabelProps={{ style: { fontSize: 15 } }}\r\n                fullWidth={true}\r\n                onChange={(event) => {\r\n                  setSearchValue(event.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <SearchIcon\r\n                className={classes.clickableIcon}\r\n                onClick={() => {\r\n                  console.log(\"search button clicked\");\r\n                  var search = searchValue;\r\n                  if (searchValue === \"\") setContainerData(containerList);\r\n                  else\r\n                    setContainerData(\r\n                      containerList.filter((e) => e.container_number === search)\r\n                    );\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <InputLabel\r\n            style={{ fontSize: \"15px\", marginTop: \"30px\", color: \"grey\" }}\r\n          >\r\n            Trucks Available\r\n          </InputLabel>\r\n          <hr\r\n            style={{ backgroundColor: \"#D3D3D3\", border: \"0px\", height: \"1px\" }}\r\n          ></hr>\r\n        </Grid>\r\n      </Grid>\r\n  \r\n      {containerData.map((container, index) => (\r\n        <AssignTrucksSubForm\r\n          containerData={container}\r\n          key={container.container_number}\r\n          index={index}\r\n          // truckOptions={truckList}\r\n          truckNumber={container.truckNumber}\r\n          onTruckSelect={(e, containerNumber) => updateContainerList(e, containerNumber)}\r\n        ></AssignTrucksSubForm>\r\n      ))}\r\n\r\n        <ConfirmDialog\r\n                      isopen={showPopup === ALERT_DIALOG}\r\n                      title={\"Send For Token?\"}\r\n                      children={\"Would you like to save the selection of trucks done on each container and send it for token request?\"}\r\n                      confirmTxt={\"Yes\"}\r\n                      closeTxt={\"No\"}\r\n                      closeButtonCss={classes.cancelButton}\r\n                      confirmButtonCss={classes.confirmButton}\r\n                      onClose={() => {\r\n                        setShowPopup(NO_DIALOG);\r\n                      }}\r\n                      onConfirm={(e) =>{\r\n                       \r\n                         AssignTruckAndDriverService.groupAndSendForApproval({requestContainerList: containerList})\r\n                         .then((response) => {\r\n                        if (response.isAxiosError) throw new Error(response.status);\r\n                         else\r\n                         {\r\n                            \r\n                              setShowConfirmation(ALERT_DIALOG);\r\n                              setShowPopup(NO_DIALOG);\r\n\r\n                        } \r\n           \r\n          })\r\n   \r\n          .catch(() => {\r\n            console.log(\"error\");\r\n          });\r\n                      \r\n                      }}\r\n                    />\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}