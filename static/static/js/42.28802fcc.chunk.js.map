{"version":3,"sources":["lib/components/messagebar/messagebar.js","lib/components/formContainer/formContainer.js","lib/components/txtinput/textInput.tsx","lib/components/select/selectBox.tsx","lib/components/autocomplete/appAutoCompleteAsyc.tsx","service/AssignTruckAndDriverService.js","lib/components/static/LabelComponent.js","components/TripConfirmPopUp.js","components/Container.js","components/ContainerTest.js"],"names":["React","memo","mb","useSelector","state","messagebar","dispatch","useDispatch","MessageContainer","msgClass","icon","className","Icon","messages","map","e","i","key","onClick","hideMessageBar","console","log","show","messageType","SUCCESS","ERROR","INFO","WARNING","getMessageBar","props","Card","CardHeader","title","CardContent","children","useStyles","makeStyles","theme","txtDiv","display","iconDiv","width","position","top","fontSize","txtField","required","name","label","fieldIcon","helperText","placeholder","classes","useRef","useEffect","form","field","meta","setFieldValue","showError","touched","error","value","event","fullWidth","id","InputProps","endAdornment","multiple","options","originalHelperText","fieldAction","option","AppAutoCompleteAsyc","type","remoteUrl","kvMapping","onSelect","useState","q","timerId","dataset","opts","setOpts","loading","setLoading","refresh","setRefresh","renders","intializeList","length","ds","opt","labEle","labelv","eval","valEle","val","autocompleteSearch","qurl","indexOf","getHttp","url","then","dItems","ele","prevState","catch","eitems","handleChange","target","onKeyPressInput","reason","clearTimeout","setTimeout","handleClose","freeSolo","autoComplete","renderOption","variant","getOptionLabel","getOptionSelected","onChange","onInputChange","onClose","renderInput","params","margin","InputLabelProps","style","AssignTruckAndDriverService","containerData","obj","endpointContants","body","postHttp","transporter","jobList","labelType","tripData","closeTxt","confirmTxt","isopen","isConfirm","onConfirm","referenceNumber","containersForm","vehicleRegistrationNo","driverCode","toTime","fromTime","validationSchema","Yup","Container","fmk","formvalues","NO_DIALOG","showPopup","setShowPopup","setTripData","savedState","setSavedState","history","useHistory","vehicleType","refVehicleType","truckKVmapping","truckUrl","EndpointContants","driverKVmapping","driverUrl","timeOptions","saveFormData","confirmation","containers","container_number","requestBoeNumber","vehicleRegistrationNumber","values","dropTimeFormatted","timeSlot","trip","assignTruckForm","containerList","orderId","response","data","dataItems","RenderTruckInfo","LabelComponent","vehicleRegNo","RenderDriverInfo","driverName","RenderTimeInfo","RenderTripInfo","initialValues","onSubmit","formData","dropTime","transactionCode","isoCode","iso_code","checkForExistingTrip","OTHER_POPUP","enableReinitialize","formik","consigneeName","text","handleClick","push","ContainerDetails","containerNo","ContainerTest","container"],"mappings":"kMAyFeA,UAAMC,MAhFrB,WACI,IAAMC,EAAKC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,cAChCC,EAAWC,cAIXC,EAAmB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAClC,OACI,oCACI,yBAAKC,UAAWF,GACZ,yBAAKE,UAAU,gBAAe,kBAACC,EAAA,EAAD,KAAOF,IAErC,yBAAKC,UAAU,gBACX,4BACIT,EAAGW,SAASC,KAAI,SAACC,EAAGC,GAChB,OAAO,wBAAIC,IAAKD,GAAID,QAIhC,yBAAKJ,UAAU,aAAaO,QAAS,WACjCZ,EAASa,iBAET,kBAACP,EAAA,EAAD,kBAkDpB,OADAQ,QAAQC,IAAInB,GAER,oCACKA,EAAGoB,OAAoB,IAAZpB,EAAGoB,MAfD,WAElB,OADAF,QAAQC,IAAI,iBACJnB,EAAGqB,aACP,KAAKC,IAAS,OARd,oCACI,kBAAChB,EAAD,CAAkBC,SAAS,+BAA+BC,KAAK,WAQnE,KAAKe,IAAO,OAjBZ,oCACI,kBAACjB,EAAD,CAAkBC,SAAS,6BAA6BC,KAAK,WAiBjE,KAAKgB,IAAM,OA1BX,oCACI,kBAAClB,EAAD,CAAkBC,SAAS,4BAA4BC,KAAK,UA0BhE,KAAKiB,IAAS,OAnCd,oCACI,kBAACnB,EAAD,CAAkBC,SAAS,+BAA+BC,KAAK,aAmCnE,QACI,OAAO,sCAOqBkB,OCjE7B5B,QAAMC,MAdrB,SAAuB4B,GACnB,OACI,oCACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAOH,EAAMG,MAAOrB,UAAU,gBAC1C,kBAACsB,EAAA,EAAD,KACI,kBAAC,EAAD,MACCJ,EAAMK,gB,6ECX3B,0EAYMC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,OAAQ,CACJC,QAAS,QAEbC,QAAS,CACLC,MAAO,OACP,SAAU,CACNC,SAAU,WACVC,IAAK,MACLC,SAAU,SAGlBC,SAAU,OA+DC7C,QAAMC,MAzDf,SAAC,GAA0E,IAAD,IAAvE6C,gBAAuE,SAArDC,EAAqD,EAArDA,KAAMC,EAA+C,EAA/CA,MAAmBC,GAA4B,EAAxCC,WAAwC,EAA5BD,WAAUE,EAAkB,EAAlBA,YAGhDC,GAFUpD,IAAMqD,OAAO,GAEblB,KAIhB,OAHAmB,qBAAU,cACP,IAGC,oCACI,kBAAC,IAAD,CAAWP,KAAMA,IAET,YAAwC,IAArCQ,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACJC,EAAkBH,EAAlBG,cAMJC,GAAY,EACZF,EAAKG,SAAWH,EAAKI,QACrBF,GAAY,EACCF,EAAKI,OAEtB,IAAInD,EAAO,KAMX,OAJIA,EADA8C,EAAMM,MACC,kBAAC,IAAD,CAAW5C,QAXE,SAAC6C,GACrBL,EAAcX,EAAM,OAYb,KAGP,oCAEI,yBAAKpC,UAAWyC,EAAQd,QACnBW,GAAa,yBAAKtC,UAAWyC,EAAQZ,SAAS,kBAAC,IAAD,KAAOS,IACtD,kBAAC,IAAD,iBAAeO,EAAf,CAAsBR,MAAOA,EAAOgB,WAAS,EAACC,GAAIT,EAAMT,KAAMpC,UAAWyC,EAAQP,SAC7EgB,MAAOF,EACPT,WAAYS,EAAYF,EAAKI,MAAQ,GACrCf,SAAUA,EAAUK,YAAaA,EACjCe,WAAY,CACRC,aAAczD,gB,uDCrE9D,0EAsEeV,QAAMC,MAxD2B,SAAC,GACF,EADImE,SACH,IADaC,EACd,EADcA,QAA2BtB,GACzC,EADuBD,SACvB,EADyCC,MAAMC,EAC/C,EAD+CA,MAC1FG,EAA2C,EAA3CA,YAAaD,EAA8B,EAA9BA,WACToB,GADuC,EAAlBC,YACA,IACzBjB,qBAAU,WACNgB,EAAqBpB,IACtB,IACalD,IAAMqD,OAAO,GAE7B,OACI,oCAEI,kBAAC,IAAD,CAAWN,KAAMA,IAET,YAAuC,EAApCQ,KAAqC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KAERE,GAAY,EAOhB,OANIF,EAAKG,SAAWH,EAAKI,OACrBF,GAAY,EACZT,EAAaO,EAAKI,OAElBX,EAAaoB,EAGb,oCAEI,kBAAC,IAAD,CAAaN,WAAS,GAClB,kBAAC,IAAD,KAAchB,GACd,kBAAC,IAAD,iBAAYQ,EAAZ,CACIR,MAAOA,EACPiB,GAAIlB,EACJI,YAAaA,EACbU,MAAOF,IAGNU,EAAQvD,KAAI,SAAC0D,EAAQxD,GAGlB,OACI,kBAAC,IAAD,CAAU8C,MAAOU,EAAOV,MAAO7C,IAAKD,GAC/BwD,EAAOxB,WAKxB,kBAAC,IAAD,CAAgBrC,WAAyB,IAAdgD,EAAqB,YAAc,IAAMT,a,2rCCpClGuB,oBAAoD,SAApDA,oBAAqD,MACgB,IADdJ,QACa,KADbA,QACa,mBADJvB,uBACI,iCADcC,KACd,KADcA,KACpFC,MAAsE,KAAtEA,MAAOE,WAA+D,KAA/DA,WAA+D,eAAnDwB,eAAmD,cAA5C,OAA4C,UAApCC,UAAoC,KAApCA,UAAWC,UAAyB,KAAzBA,UAAUC,SAAe,KAAfA,SAAe,UAC9CC,oDAAS,CAAEC,EAAG,GAAIC,QAAS,KAAMC,QAAS,KADI,qLAC/DC,KAD+D,cACzDC,QADyD,yBAExCL,qDAAS,GAF+B,sLAE/DM,QAF+D,cAEtDC,WAFsD,yBAGxCP,qDAAS,GAH+B,sLAG/DQ,QAH+D,cAGtDC,WAHsD,cAIhEC,QAAUxF,6CAAMqD,OAAO,GAGvBoC,cAAgB,SAAhBA,gBACF,GAAIpB,SAAWA,QAAQqB,OAAS,EAAG,CAC/B,IAAIC,GAAUtB,QACVO,YACAe,GAAKtB,QAAQvD,KAAI,SAAC8E,KACd,IAAIC,OAAS,OAASjB,UAAU5B,MAC5B8C,OAASC,KAAKF,QACdG,OAAS,OAASpB,UAAUd,MAC5BmC,IAAMF,KAAKC,QACf,MAAO,CAAEhD,MAAO8C,OAAQhC,MAAOmC,SAGvCd,QAAQ,CACJJ,EAAG,GACHE,QAASU,GACTX,QAAS,OAGb5D,QAAQC,IAAIsE,MAgBpB,OAXArC,sDAAU,cAQP,IAIC,sHAEI,2DAAC,sCAAD,CAAOP,KAAMA,OAEL,gBAAwC,IAArCQ,KAAoC,MAApCA,KAAMC,MAA8B,MAA9BA,MAAOC,KAAuB,MAAvBA,KACJC,cAAkBH,KAAlBG,cAEJsB,QAAe,KAEbkB,mBAAqB,SAArBA,mBAAsBpC,OAExB,IAAIqC,KADJd,YAAW,GAIRc,MAD6B,IAA5BxB,UAAUyB,QAAQ,KACZzB,UAAY,MAAZ,UAAuBb,OAGrBa,UAAY,MAAZ,UAAuBb,OAKnC1C,QAAQC,IAAI,UAAW8E,MACvBE,2DAAQ,CAAEC,IAAKH,OAAQ,GAAOI,MAAK,SAAAxF,GAC/B,IAAIyF,OAAc,GAClBpF,QAAQC,IAAIN,GACZyF,OAASzF,EAAED,KAAI,SAAC2F,KACZ,IAAIZ,OAAS,OAASjB,UAAU5B,MAC5B8C,OAASC,KAAKF,QACdG,OAAS,OAASpB,UAAUd,MAC5BmC,IAAMF,KAAKC,QACf,MAAO,CAAEhD,MAAO8C,OAAQhC,MAAOmC,QAEnC7E,QAAQC,IAAImF,QACZrB,SAAQ,SAACuB,GAAD,oKAAC,gKACFA,GADC,IAEJzB,QAASuB,YAEbnB,YAAW,MAEZsB,OAAM,SAAA9C,GACLwB,YAAW,GACX,IAAIuB,EAAS,CAAC,CAAE5D,MAAO,6BAA+Ba,EAAOC,MAAO,UACpEqB,SAAQ,SAACuB,GAAD,oKAAC,gKACFA,GADC,IAEJzB,QAAS2B,WAQfC,aAAe,SAAC9C,EAAYS,GAC9Be,YAAW,GACG,MAAVf,GACAd,cAAcX,KAAMyB,EAAOV,OAC3Be,SAAS9B,KAAMyB,EAAOV,MAAMU,EAAOxB,SAGnCe,EAAM+C,OAAOhD,MAAQ,GACrBJ,cAAcX,KAAM,IACpB8B,SAAS9B,KAAM,GAAG,MAKpBgE,gBAAkB,SAAChD,EAAYD,EAAekD,GAC7B,UAAfjD,EAAMW,OAGVa,YAAW,GAEPZ,WAAuB,KAAVb,IACbmD,aAAa/B,KAAKF,SAElBA,QAAUkC,YAAW,WACjBhB,mBAAmBpC,KACpB,KACHqB,SAAQ,SAACuB,GAAD,oKAAC,gKACFA,GADC,IAEJ3B,EAAGjB,EACHkB,QAASA,gBAQfmC,YAAc,SAACpD,EAAYiD,GAEzBrC,WACAQ,SAAQ,SAACuB,GAAD,oKAAC,gKACFA,GADC,IAEJzB,QAAS,QAGjB7D,QAAQC,IAAI,WACZkE,YAAW,IAKf,OAEI,sHAGI,2DAAC,6DAAD,CACI6B,UAAQ,EACRC,cAAc,EACdhD,QAASa,KAAKD,QACdqC,aAAc,SAAC9C,GAAD,OACV,2DAAC,iDAAD,CAAY+C,QAAQ,SAAS/C,EAAOxB,QAExCwE,eAAgB,SAAChD,GAAD,OAAwBA,EAAOxB,OAC/CyE,kBAAmB,SAACjD,EAAoBV,GACpC,OAAO,GAGX4D,SAAUb,aACVc,cAAeZ,gBACfa,QAAST,YACTU,YAAa,SAACC,GACV,OAAQ,sHACJ,kEAAKnH,UAAU,sBACX,2DAAC,iDAAD,eAAW0G,aAAa,SAAcS,EAAtC,CAA8C9E,MAAOA,MAAQuE,QAAQ,WACpEQ,OAAO,QAAUC,gBAAiB,CAC/BC,MAAM,CACLrF,SAAU,YAKdwC,SAAW,2DAAC,iDAAD,CAAkBzE,UAAU,wCAezEX,mEAAMC,KAAKwE,sB,yEChNpByD,E,gHAEsBC,GAEpB,IAEIC,EAAO,CAAE9B,IAFK+B,IAGdC,KAAKH,GAGV,OAAQI,YAASH,GAAK,GAAMzB,OAAM,SAAA9C,GAEjC,OAAOA,O,gDAOP,IAMIuE,EAAM,CAAE9B,IANG,UAAK+B,MASrB,OAAOhC,YAAQ+B,GAAK,K,gDAKGI,GAEtB,IAMIJ,EAAM,CAAE9B,IANG,UAAK+B,IAAL,wBAA+DG,IAS/E,OAAOnC,YAAQ+B,GAAK,K,yCAKJK,GAEf,IAEIL,EAAO,CAAE9B,IAFK+B,KAGdC,KAAKG,GAGV,OAAQF,YAASH,GAAK,GAAMzB,OAAM,SAAA9C,GAEjC,OAAOA,O,0CAOP,IAEIuE,EAAO,CAAE9B,IAFK+B,KAInB,OAAQhC,YAAQ+B,GAAK,GAAOzB,OAAM,SAAA9C,GAEjC,OAAOA,S,KAUA,QAAIqE,G,iCCzFnB,sCAwCelI,QAAMC,MApCrB,SAAwB4B,GAEpB,OACI,oCAEI,yBAAKlB,UAAU,sCACVkB,EAAMmB,OAEX,yBAAKrC,UAAU,aACU,IAApBkB,EAAM6G,WACH,0BAAM/H,UAAU,aACXkB,EAAMiC,OAIM,IAApBjC,EAAM6G,WACH,0BAAMxH,QAAS,WACXW,EAAMX,QAAQW,EAAMoC,KACrBtD,UAAU,iCACRkB,EAAMiC,OAKM,IAApBjC,EAAM6G,WACH,0BAAMxH,QAAS,WACXW,EAAMX,QAAQW,EAAMoC,KACrBtD,UAAU,4BACT,kBAAC,IAAD,8BAHJ,MAG0CkB,EAAMiC,a,uMCuBrD9D,MAAMC,MA3CI,SAAC4B,GAItBT,QAAQC,IAAI,QAAQQ,GAgBpB,GAAGA,EAAM8G,SAGT,OAEgB,oCAEI,kBAAC,IAAD,CAAW3G,MAAM,eAAe4G,SAAU,KAAMC,WAAY,MAAOjB,QAdnE,SAAC7G,GAEjBK,QAAQC,IAAI,gBACZQ,EAAM+F,QAAQ,OAYMkB,OAAQjH,EAAMiH,OACdC,WAAW,EAAMC,UAAW,WArBjD5H,QAAQC,IAAI,kBACZQ,EAAMmH,UAAU,SAqBG,0DAAgCnH,EAAM8G,SAASM,gBAA/C,4GCtBtBC,EAAiB,CACjBC,sBAAuB,GACvBC,WAAY,GACZC,OAAO,IACPC,SAAS,KAIPC,EAAmBC,IAAW,CAChCL,sBAAuBK,MAAa1G,SAAS,6CAuWlC2G,IApWG,SAAC5H,GAAW,IAkBtB6H,EAlBqB,EACW5E,mBAASoE,GADpB,mBAClBS,EADkB,aAES7E,mBAAS8E,MAFlB,mBAElBC,EAFkB,KAEPC,EAFO,OAGOhF,qBAHP,mBAGlB6D,EAHkB,KAGRoB,EAHQ,OAIWjF,qBAJX,mBAIlBkF,EAJkB,KAINC,EAJM,KAOrBC,EAAUC,cAGVC,EAAcvI,EAAMwI,eAElBC,EAAiB,CAAE,MAAS,QAAS,MAAS,SAC9CC,EAAQ,UAAMC,IAAN,YAAoDJ,GAG5DK,EAAkB,CAAE,MAAS,QAAS,MAAS,SAC/CC,EAAS,UAAMF,KAGfG,EAAc,CAChB,CAAE,MAAS,SAAU,MAAS,KAC9B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,OAAQ,MAAS,QAC5B,CAAE,MAAS,OAAQ,MAAS,QAC5B,CAAE,MAAS,OAAQ,MAAS,QAC5B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,MAAO,MAAS,OAC3B,CAAE,MAAS,OAAQ,MAAS,QAC5B,CAAE,MAAS,OAAQ,MAAS,QAC5B,CAAE,MAAS,OAAQ,MAAS,SAmC1BC,EAAa,SAACC,GAGhB,IAAKC,EACL,GAAkB,OAAfD,EACH,CAEGC,EAAa,CAAC,CAAEC,iBAAkBlJ,EAAMsG,cAAc4C,iBAAiBC,iBAAiBnJ,EAAMsG,cAAc6C,iBAAiBC,0BAA2BvB,EAAIwB,OAAO/B,sBAClKC,WAAYM,EAAIwB,OAAO9B,WAAW+B,kBAAkBtJ,EAAMsG,cAAcgD,kBAAkBC,SAAS1B,EAAIwB,OAAO5B,SAAS,IAAII,EAAIwB,OAAO7B,OAAOgC,KAFjI,WAKQ,QAAfR,IACRC,EAAa,CAAC,CAAEC,iBAAkBlJ,EAAMsG,cAAc4C,iBAAiBE,0BAA2BvB,EAAIwB,OAAO/B,sBACtGC,WAAYM,EAAIwB,OAAO9B,WAAW+B,kBAAkBtJ,EAAMsG,cAAcgD,kBAAkBC,SAAS1B,EAAIwB,OAAO5B,SAAS,IAAII,EAAIwB,OAAO7B,OAAOgC,KAAK1C,KAK1J,IAAI2C,EAAkB,CAAGC,cAAcT,EAAY7B,gBAAiBpH,EAAM2J,SAGxEtD,IAA4B0C,aAAaU,GACrC/E,MAAK,SAAAkF,GACFrK,QAAQC,IAAI,gBACZ4I,EAAcwB,EAASC,KAAKC,UAAU,OAGzChF,OAAM,SAAA9C,QASV+H,EAAgB,WAGlB,OAAG5B,GAEC5I,QAAQC,IAAI,8BACL,oCACP,kBAACwK,EAAA,EAAD,CAAgBnD,UAAW,EAAG1F,MAAM,8BAA8Bc,MAAOkG,EAAWqB,KAAKS,iBAItFjK,EAAMsG,cAAckD,MAAQxJ,EAAMsG,cAAckD,KAAKS,cAExD1K,QAAQC,IAAI,wBACL,oCACV,kBAACwK,EAAA,EAAD,CAAgBnD,UAAW,EAAG1F,MAAM,8BAA8Bc,MAAOjC,EAAMsG,cAAckD,KAAKS,kBAM/F1K,QAAQC,IAAI,0BACL,oCACP,kBAAC,IAAD,CAAqB0B,KAAM,wBAAyBC,MAAM,8BACxB4B,UAAW0F,EACrC3F,UAAW4F,EACX1F,SAAW,kBAWzBkH,EAAiB,WAEnB,OAAG/B,GAEK5I,QAAQC,IAAI,+BACL,oCACP,kBAACwK,EAAA,EAAD,CAAgBnD,UAAW,EAAG1F,MAAM,aAAac,MAAOkG,EAAWqB,KAAKW,eAK7EnK,EAAMsG,cAAckD,MAAQxJ,EAAMsG,cAAckD,KAAKW,YAEpD5K,QAAQC,IAAI,yBACL,oCACP,kBAACwK,EAAA,EAAD,CAAgBnD,UAAW,EAAG1F,MAAM,aAAac,MAAOjC,EAAMsG,cAAckD,KAAKW,gBAMjF5K,QAAQC,IAAI,2BACL,oCACP,kBAAC,IAAD,CAAqB0B,KAAM,aAAcC,MAAM,cACZ4B,UAAW6F,EACtC9F,UAAW+F,EACX7F,SAAW,kBASrBoH,EAAe,WAEjB,OAAGjC,GAEC5I,QAAQC,IAAI,+BACL,oCACP,kBAACwK,EAAA,EAAD,CAAgBnD,UAAW,EAAG1F,MAAM,aAAac,MAAOkG,EAAWoB,aAKpEvJ,EAAMsG,cAAciD,SAEZ,oCACP,kBAACS,EAAA,EAAD,CAAgBnD,UAAW,EAAG1F,MAAM,YAAYc,MAAOjC,EAAMsG,cAAciD,YAKpE,oCACP,kBAAC,IAAD,CAAWpI,MAAO,YAAaD,KAAM,WACrCsB,QAASsG,IAGT,kBAAC,IAAD,CAAW3H,MAAO,UAAWD,KAAM,SACnCsB,QAASsG,MAQXuB,EAAe,WACjB,OAAGlC,GAEC5I,QAAQC,IAAI,wBACL,oCACP,kBAACwK,EAAA,EAAD,CAAgBnD,UAAW,EAAG1F,MAAM,wBAAwBc,MAAOkG,EAAWqB,KAAKpC,oBAG/EpH,EAAMsG,cAAckD,KAEjB,oCACP,kBAACQ,EAAA,EAAD,CAAgBnD,UAAW,EAAG1F,MAAM,wBAAwBc,MAAOjC,EAAMsG,cAAckD,KAAKpC,mBAGzF,sCAOP,OACI,kBAAC,IAAD,CAAQkD,cAAexC,EACvBJ,iBAAkBA,EAClB6C,SAlMa,SAAAlB,GACb9J,QAAQC,IAAI,SAAU6J,GAGtB,IAAImB,EAAS,CAACtB,iBAAkBlJ,EAAMsG,cAAc4C,iBAAkBE,0BAA2BC,EAAO/B,sBACpGmD,SAASzK,EAAMsG,cAAcgD,kBAAkBC,SAASF,EAAO5B,SAAS,IAAI4B,EAAO7B,OAAQkD,gBAAiB1K,EAAM2J,QAAQgB,QAAQ3K,EAAMsG,cAAcsE,UAEzJrL,QAAQC,IAAI,cAAegL,GACxBnE,IAA4BwE,qBAAqBL,GACpD9F,MAAK,SAAAkF,GAECA,EAASC,KAAKC,UAAU,GAAG1C,iBAE7Bc,EAAY0B,EAASC,KAAKC,UAAU,IACpC7B,EAAa6C,MAGV/B,EAAa,SAIpBjE,OAAM,SAAA9C,QA8KM+I,oBAAkB,IAEvB,SAAAC,GAEI,OADAnD,EAAMmD,EAEF,oCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMxF,aAAa,OACf,yBAAK1G,UAAU,OACf,yBAAKA,UAAU,YACX,kBAACkL,EAAA,EAAD,CAAgBnD,UAAW,EAAG1F,MAAM,qBAAqBc,MAAOjC,EAAMsG,cAAc6C,oBAEpF,yBAAKrK,UAAU,YACf,kBAACkL,EAAA,EAAD,CAAgBnD,UAAW,EAAG1F,MAAM,mBAAmBc,MAAOjC,EAAMsG,cAAc4C,oBAElF,yBAAKpK,UAAU,YACf,kBAACkL,EAAA,EAAD,CAAgBnD,UAAW,EAAG1F,MAAM,iBAAiBc,MAAOjC,EAAMsG,cAAc2E,iBAEhF,yBAAKnM,UAAU,YACf,kBAACkL,EAAA,EAAD,CAAgBnD,UAAW,EAAG1F,MAAM,YAAYc,MAAOjC,EAAMsG,cAAcgD,sBAQ/E,yBAAKxK,UAAU,OACX,yBAAKA,UAAU,YACf,kBAACkL,EAAA,EAAD,CAAgBnD,UAAW,EAAG1F,MAAM,WAAWc,MAAOjC,EAAMsG,cAAcsE,YAG1E,yBAAK9L,UAAU,YACZ,kBAACiL,EAAD,OAGH,yBAAKjL,UAAU,YACb,kBAACoL,EAAD,OAEF,yBAAKpL,UAAU,YACf,kBAACsL,EAAD,QAKJ,yBAAKtL,UAAU,OACf,yBAAKA,UAAU,YACX,kBAACuL,EAAD,QAIJ,yBAAKvL,UAAU,iBACf,yBAAKA,UAAU,OAGf,kBAAC,IAAD,CAAWoM,KAAM,OAAQrI,KAAM,SAAYsI,YAAa,WACxC9C,EAAQ+C,KAAK,wBAM1BjD,GAAYnI,EAAMsG,cAAckD,KAGnC,4BADA,kBAAC,IAAD,CAAY0B,KAAM,SAAUrI,KAAM,SAAUhE,KAAK,YAkBjD,kBAAC,EAAD,CAAkBoI,OAAQe,IAAc8C,IAAahE,SAAUA,EAAUf,QAAS,SAAC7G,GAC/E6J,EAAa7J,GACb+I,EAAaF,MACdZ,UAAW,SAACjI,GACX6J,EAAa7J,GACb+I,EAAaF,gB,iCC7WrD,oCAIMsD,EAAmB,CACrB,CACIC,YAAa,QAEjB,CACIA,YAAa,QAEjB,CACIA,YAAY,SAqBLC,UAdO,WAElB,OACI,yBAAKzM,UAAU,UACVuM,EAAiBpM,KAAI,SAAAuM,GAAS,OAC3B,kBAAC,IAAD,CAAWF,YAAaE,EAAUF,YAAalM,IAAKoM,EAAUF","file":"static/js/42.28802fcc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { ms } from 'date-fns/locale';\r\nimport { SUCCESS, ERROR, INFO, WARNING } from '../../redux/messagebar/messagebarType';\r\nimport './messagebar.css';\r\nimport { Icon } from '@material-ui/core';\r\nimport { hideMessageBar } from '../../redux';\r\n\r\nfunction Messagebar() {\r\n    const mb = useSelector(state => state.messagebar);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n    const MessageContainer = ({ msgClass, icon }) => {\r\n        return (\r\n            <>\r\n                <div className={msgClass}>\r\n                    <div className=\"message-icon\"><Icon>{icon}</Icon></div>\r\n\r\n                    <div className=\"message-list\">\r\n                        <ul>{\r\n                            mb.messages.map((e, i) => {\r\n                                return <li key={i}>{e}</li>\r\n                            })\r\n                        }</ul>\r\n                    </div>\r\n                    <div className=\"close-icon\" onClick={() => {\r\n                        dispatch(hideMessageBar())\r\n                    }}>\r\n                        <Icon>clear</Icon>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    const getWarningMessage = () => {\r\n        return (\r\n            <>\r\n                <MessageContainer msgClass='alert-message-box bg-warning' icon='warning' />\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getInfoMessage = () => {\r\n        return (\r\n            <>\r\n                <MessageContainer msgClass='alert-message-box bg-info' icon='info' />\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getErrorMessage = () => {\r\n        return (\r\n            <>\r\n                <MessageContainer msgClass='alert-message-box bg-error' icon='error' />\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getSuccessMessage = () => {\r\n        return (\r\n            <>\r\n                <MessageContainer msgClass='alert-message-box bg-success' icon='check' />\r\n            </>)\r\n    }\r\n\r\n    const getMessageBar = () => {\r\n        console.log('IN componenet');\r\n        switch (mb.messageType) {\r\n            case SUCCESS: return getSuccessMessage();\r\n            case ERROR: return getErrorMessage();\r\n            case INFO: return getInfoMessage();\r\n            case WARNING: return getWarningMessage();\r\n            default:\r\n                return <></>;\r\n        }\r\n\r\n    }\r\n    console.log(mb);\r\n    return (\r\n        <>\r\n            {mb.show && mb.show === true && getMessageBar()}\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default React.memo(Messagebar);\r\n","import React from 'react'\r\nimport { Card, CardHeader, CardContent } from '@material-ui/core';\r\nimport './formContainer.css';\r\nimport Messagebar from '../messagebar/messagebar';\r\nfunction FormContainer(props) {\r\n    return (\r\n        <>\r\n            <Card>\r\n                <CardHeader title={props.title} className=\"page-header\" />\r\n                <CardContent>\r\n                    <Messagebar />\r\n                    {props.children}\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(FormContainer);\r\n","import { TextField, makeStyles, Icon } from \"@material-ui/core\";\r\nimport { ClearOutlined, AccountCircle } from '@material-ui/icons';\r\nimport { FastField, FieldAttributes, FieldProps } from \"formik\";\r\nimport React, { useEffect } from 'react';\r\nimport { ElementInputProps } from '../../common/ElementInputProps';\r\nimport './textInput.css';\r\nimport ClearIcon from \"../icons/clearIcon\";\r\n\r\ntype MyTextFieldProps =\r\n    { iconType?: string } & ElementInputProps & FieldAttributes<{}>;\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    txtDiv: {\r\n        display: \"flex\"\r\n    },\r\n    iconDiv: {\r\n        width: \"25px\",\r\n        \"& span\": {\r\n            position: \"absolute\",\r\n            top: \"40%\",\r\n            fontSize: \"16px\"\r\n        }\r\n    },\r\n    txtField: {\r\n    }\r\n}));\r\n\r\n\r\nconst TextInput: React.FC<ElementInputProps>\r\n    = ({ required = false, name, label, helperText, fieldIcon,placeholder }) => {\r\n        const renders = React.useRef(0);\r\n        const showIcon = false;\r\n        const classes = useStyles();\r\n        useEffect(() => {\r\n        }, [])\r\n\r\n        return (\r\n            <>\r\n                <FastField name={name}>\r\n                    {\r\n                        ({ form, field, meta }: FieldProps) => {\r\n                            const { setFieldValue } = form;\r\n\r\n                            const handleIconClick = (event: any) => {\r\n                                setFieldValue(name, '');\r\n                            }\r\n\r\n                            let showError = false;\r\n                            if (meta.touched && meta.error) {\r\n                                showError = true;\r\n                                helperText = meta.error;\r\n                            }\r\n                            let icon = null;\r\n                            if (field.value) {\r\n                                icon = <ClearIcon onClick={handleIconClick} />;\r\n                            } else {\r\n                                icon = null;\r\n                            }\r\n                            return (\r\n                                <>\r\n                                    {/* <div>renders:{renders.current++}</div> */}\r\n                                    <div className={classes.txtDiv}>\r\n                                        {fieldIcon && <div className={classes.iconDiv}><Icon>{fieldIcon}</Icon></div>}\r\n                                        <TextField {...field} label={label} fullWidth id={field.name} className={classes.txtField}\r\n                                            error={showError}\r\n                                            helperText={showError ? meta.error : \"\"}\r\n                                            required={required} placeholder={placeholder}\r\n                                            InputProps={{\r\n                                                endAdornment: icon\r\n                                            }}\r\n\r\n                                        />\r\n                                    </div>\r\n                                </>\r\n\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                </FastField>\r\n\r\n            </>\r\n        )\r\n\r\n    }\r\n\r\nexport default React.memo(TextInput);","import { FormControl, InputLabel, MenuItem, Select, FormHelperText } from '@material-ui/core';\r\nimport { FastField, FieldAttributes, FieldProps } from \"formik\";\r\nimport React, { useEffect } from 'react';\r\nimport { ElementInputProps, LabelValue } from '../../common/ElementInputProps';\r\n\r\n\r\ntype MySelectFieldProps =\r\n    {\r\n        options: LabelValue[],\r\n        multiple?: boolean\r\n    } & ElementInputProps & FieldAttributes<{}>\r\n\r\n\r\n\r\nconst SelectBox: React.FC<MySelectFieldProps> = ({ multiple, options, required = false, name, label,\r\n    placeholder, helperText, fieldAction }) => {\r\n    let originalHelperText = '';\r\n    useEffect(() => {\r\n        originalHelperText = helperText;\r\n    }, []);\r\n    const renders = React.useRef(0);\r\n\r\n    return (\r\n        <>\r\n\r\n            <FastField name={name}>\r\n                {\r\n                    ({ form, field, meta }: FieldProps) => {\r\n\r\n                        let showError = false;\r\n                        if (meta.touched && meta.error) {\r\n                            showError = true;\r\n                            helperText = meta.error;\r\n                        } else {\r\n                            helperText = originalHelperText;\r\n                        }\r\n                        return (\r\n                            <>\r\n                                {/* <div>renders:{renders.current++}</div> */}\r\n                                <FormControl fullWidth>\r\n                                    <InputLabel >{label}</InputLabel>\r\n                                    <Select {...field}\r\n                                        label={label}\r\n                                        id={name}\r\n                                        placeholder={placeholder}\r\n                                        error={showError}\r\n                                    >\r\n                                       \r\n                                        {options.map((option, i) => {\r\n                                            // console.log(option);\r\n\r\n                                            return (\r\n                                                <MenuItem value={option.value} key={i}>\r\n                                                    {option.label}\r\n                                                </MenuItem>\r\n                                            );\r\n                                        })}\r\n                                    </Select>\r\n                                    <FormHelperText className={showError === true ? \"Mui-error\" : \"\"} >{helperText}</FormHelperText>\r\n                                </FormControl>\r\n                            </>\r\n                        )\r\n                    }\r\n                }\r\n            </FastField>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(SelectBox);","import React, { useEffect, Fragment, useState } from 'react';\r\nimport { Field, useField, FieldAttributes, FastField, FieldProps } from \"formik\";\r\nimport { ElementInputProps, LabelValue } from '../../common/ElementInputProps';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { TextField, CircularProgress ,Typography} from '@material-ui/core';\r\nimport './autocomplete.css';\r\nimport { getHttp } from '../../common/HttpService';\r\nimport { propTypes } from 'react-bootstrap/esm/Image';\r\n\r\n\r\n\r\n\r\ntype MySelectFieldProps =\r\n    {\r\n        options?: LabelValue[],\r\n        remoteUrl?: string,\r\n        reload?: number,\r\n        kvMapping?: any,\r\n        onSelect?:any\r\n    } & ElementInputProps & FieldAttributes<{}>\r\n\r\n\r\nconst AppAutoCompleteAsyc: React.FC<MySelectFieldProps> = ({ options, required = false, name,\r\n    label, helperText, type = \"text\", remoteUrl, kvMapping,onSelect }) => {\r\n    const [opts, setOpts] = useState({ q: '', timerId: null, dataset: [] });\r\n    const [loading, setLoading] = useState(false);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const renders = React.useRef(0);\r\n\r\n\r\n    const intializeList = () => {\r\n        if (options && options.length > 0) {\r\n            let ds: any = options;\r\n            if (kvMapping) {\r\n                ds = options.map((opt) => {\r\n                    let labEle = 'opt.' + kvMapping.label;\r\n                    let labelv = eval(labEle);\r\n                    let valEle = 'opt.' + kvMapping.value;\r\n                    let val = eval(valEle);\r\n                    return { label: labelv, value: val }\r\n                })\r\n            }\r\n            setOpts({\r\n                q: '',\r\n                dataset: ds,\r\n                timerId: null\r\n            })\r\n\r\n            console.log(ds);\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        // if (options && options.length > 0) {\r\n        //     setOpts({\r\n        //         q: '',\r\n        //         dataset: options,\r\n        //         timerId: null\r\n        //     })\r\n        // }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Field name={name}>\r\n                {\r\n                    ({ form, field, meta }: FieldProps) => {\r\n                        const { setFieldValue } = form;\r\n\r\n                        let timerId: any = null;\r\n\r\n                        const autocompleteSearch = (value: any) => {\r\n                            setLoading(true);\r\n                            let qurl;\r\n\r\n                            if (remoteUrl.indexOf('?') === -1) {\r\n                               qurl = remoteUrl + '?q=' + `${value}`;\r\n                            } else {\r\n                                \r\n                                 qurl = remoteUrl + '&q=' + `${value}`;\r\n                            }\r\n                         \r\n                            \r\n                         \r\n                            console.log(\"url::::\", qurl);\r\n                            getHttp({ url: qurl }, false).then(e => {\r\n                                let dItems: any = [];\r\n                                console.log(e);\r\n                                dItems = e.map((ele: any) => {\r\n                                    let labEle = 'ele.' + kvMapping.label;\r\n                                    let labelv = eval(labEle);\r\n                                    let valEle = 'ele.' + kvMapping.value;\r\n                                    let val = eval(valEle);\r\n                                    return { label: labelv, value: val }\r\n                                });\r\n                                console.log(dItems);\r\n                                setOpts((prevState) => ({\r\n                                    ...prevState,\r\n                                    dataset: dItems\r\n                                }));\r\n                                setLoading(false);\r\n\r\n                            }).catch(error => {\r\n                                setLoading(false);\r\n                                let eitems = [{ label: 'Unable to Fetch the data: ' + error, value: '-3333' }]\r\n                                setOpts((prevState) => ({\r\n                                    ...prevState,\r\n                                    dataset: eitems\r\n                                }));\r\n                            })\r\n                        };\r\n\r\n\r\n\r\n\r\n                        const handleChange = (event: any, option: LabelValue) => {\r\n                            setRefresh(true);\r\n                            if (option != null) {\r\n                                setFieldValue(name, option.value);\r\n                                onSelect(name, option.value,option.label);\r\n                            }\r\n                            else {\r\n                                event.target.value = '';\r\n                                setFieldValue(name, '');\r\n                                onSelect(name, '','');\r\n                            }\r\n                            \r\n                        }\r\n\r\n                        const onKeyPressInput = (event: any, value: string, reason: string) => {\r\n                            if (event.type === 'click') {\r\n                                return;\r\n                            }\r\n                            setRefresh(true);\r\n\r\n                            if (remoteUrl && value !== '') {\r\n                                clearTimeout(opts.timerId);\r\n\r\n                                timerId = setTimeout(() => {\r\n                                    autocompleteSearch(value)\r\n                                }, 200);\r\n                                setOpts((prevState) => ({\r\n                                    ...prevState,\r\n                                    q: value,\r\n                                    timerId: timerId\r\n                                }));\r\n\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                        const handleClose = (event: any, reason: any) => {\r\n\r\n                            if (remoteUrl) {\r\n                                setOpts((prevState) => ({\r\n                                    ...prevState,\r\n                                    dataset: []\r\n                                }));\r\n                            }\r\n                            console.log('closing');\r\n                            setRefresh(false);\r\n\r\n\r\n                        }\r\n\r\n                        return (\r\n\r\n                            <>\r\n                                {/* <div>renders:{renders.current++}</div> */}\r\n\r\n                                <Autocomplete\r\n                                    freeSolo\r\n                                    autoComplete={false}\r\n                                    options={opts.dataset}\r\n                                    renderOption={(option) => (\r\n                                        <Typography variant=\"body2\">{option.label}</Typography>\r\n                                      )}\r\n                                    getOptionLabel={(option: LabelValue) => option.label}\r\n                                    getOptionSelected={(option: LabelValue, value: any) => {\r\n                                        return true;\r\n                                    }}\r\n                                    \r\n                                    onChange={handleChange}\r\n                                    onInputChange={onKeyPressInput}\r\n                                    onClose={handleClose}\r\n                                    renderInput={(params: any) => {\r\n                                        return (<>\r\n                                            <div className=\"autoSelect-txt-div\">\r\n                                                <TextField autoComplete=\"false\"   {...params} label={label}  variant=\"outlined\"\r\n                                                 margin=\"dense\"   InputLabelProps={{\r\n                                                    style:{\r\n                                                     fontSize: '16px',   \r\n                                                    }}}\r\n                                            \r\n                                                   \r\n                                                />\r\n                                                {loading && <CircularProgress className=\"auto-search-loading-icon\" />}\r\n                                            </div>\r\n                                        </>)\r\n                                    }}\r\n                                    \r\n                                />\r\n                            </>\r\n                        )\r\n                    }\r\n                }\r\n            </Field>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(AppAutoCompleteAsyc);","import { postHttp } from '../lib/common/HttpService';\r\nimport * as endpointContants from '../utils/ptmsEndpoints';\r\nimport { getHttp } from '../lib/common/HttpService';\r\nimport { checkForExistingTrip } from './../utils/ptmsEndpoints';\r\n\r\n\r\n\r\nclass AssignTruckAndDriverService {\r\n\r\n    groupAndSendForApproval(containerData) {\r\n\r\n        const remoteUrl = endpointContants.groupAndSendForApproval ;\r\n\r\n        let obj =  { url: remoteUrl ,\r\n            body:containerData\r\n         };\r\n\r\n       return  postHttp(obj, true).catch(error => {\r\n    \r\n        return error;\r\n       });\r\n               \r\n    }\r\n    \r\n    fetchTrucksForUserTypes()\r\n    {\r\n        const remoteUrl =`${endpointContants.fetchTruckByUserTypes}`;\r\n\r\n       // const remoteUrl = '${endpointContants.fetchTrucksForTransporter}?transporterCode=${transporterCode}&vehicleType=${vehicleType}';\r\n     \r\n\r\n\r\n        let obj = { url: remoteUrl };\r\n\r\n\r\n       return getHttp(obj, false);\r\n           \r\n\r\n    }\r\n\r\n    fetchTrucksForTransporter(transporter)\r\n    {\r\n        const remoteUrl =`${endpointContants.fetchTrucksForTransporter}?transporter=${transporter}`;\r\n\r\n       // const remoteUrl = '${endpointContants.fetchTrucksForTransporter}?transporterCode=${transporterCode}&vehicleType=${vehicleType}';\r\n     \r\n\r\n\r\n        let obj = { url: remoteUrl };\r\n\r\n\r\n       return getHttp(obj, false);\r\n           \r\n\r\n    }\r\n\r\n    sendJobForApproval(jobList)\r\n    {\r\n        const remoteUrl = endpointContants.sendJobsForApproval ;\r\n\r\n        let obj =  { url: remoteUrl ,\r\n            body:jobList\r\n         };\r\n\r\n       return  postHttp(obj, true).catch(error => {\r\n    \r\n        return error;\r\n       });\r\n    }\r\n\r\n\r\n    fetchTransporters()\r\n    {\r\n        const remoteUrl = endpointContants.fetchTransporters ;\r\n\r\n        let obj =  { url: remoteUrl };\r\n\r\n       return  getHttp(obj, false).catch(error => {\r\n    \r\n        return error;\r\n       });\r\n    }\r\n\r\n\r\n           \r\n\r\n    }\r\n\r\n\r\nexport default new AssignTruckAndDriverService()","import React from 'react';\r\nimport './label.css';\r\nimport { Icon } from '@material-ui/core';\r\n\r\nfunction LabelComponent(props) {\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"MuiFormLabel-root label-label-text\">\r\n                {props.label}\r\n            </div>\r\n            <div className=\"label-div\">\r\n                {props.labelType === 1 &&\r\n                    <span className=\"label-txt\">\r\n                        {props.value}\r\n                    </span>\r\n                }\r\n\r\n                {props.labelType === 2 &&\r\n                    <span onClick={() => {\r\n                        props.onClick(props.id)\r\n                    }} className=\"label-txt label-txt-hyperlink\">\r\n                        {props.value}\r\n                    </span>\r\n                }\r\n\r\n\r\n                {props.labelType === 3 &&\r\n                    <span onClick={() => {\r\n                        props.onClick(props.id)\r\n                    }} className=\"label-txt label-download\">\r\n                        <Icon>vertical_align_bottom</Icon>   {props.value}\r\n                    </span>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(LabelComponent);\r\n\r\n","import React, { useEffect,useState } from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Grid } from '@material-ui/core';\r\nimport TextInput from '../lib/components/txtinput/textInput';\r\nimport { AppDialog } from '../lib/components/dialog/dialogBox';\r\nimport AppButton from '../lib/components/buttons/appButton';\r\n\r\n\r\n\r\n\r\n\r\nconst TripConfirmPopUp = (props) => {\r\n\r\n  \r\n\r\n    console.log('props',props);\r\n\r\n\r\n    const handleConfirm = () => {\r\n       console.log(\"inside confirm\");\r\n       props.onConfirm(\"YES\");\r\n\r\n    }\r\n\r\n    const handleClose = (e) => {\r\n        // fmk.resetForm();\r\n        console.log(\"inside close\")\r\n        props.onClose(\"NO\");\r\n    }\r\n\r\n  \r\n    if(props.tripData)\r\n    {\r\n\r\n    return (\r\n      \r\n                    <>\r\n\r\n                        <AppDialog title=\"Confirm Trip\" closeTxt={\"NO\"} confirmTxt={\"YES\"} onClose={handleClose}\r\n                            isopen={props.isopen}\r\n                            isConfirm={true} onConfirm={() => { handleConfirm() }}>\r\n                          <h4>Trip with reference number {props.tripData.referenceNumber} already exists for the selected time slot and truck.Do you want to add container to existing trip?</h4>\r\n                        </AppDialog>\r\n\r\n\r\n\r\n                    </>\r\n                \r\n  \r\n\r\n       \r\n    )\r\n}\r\n}\r\nexport default React.memo(TripConfirmPopUp);","import React, { useEffect, useState } from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport FormContainer from '../lib/components/formContainer/formContainer';\r\nimport LabelComponent from '../lib/components/static/LabelComponent';\r\nimport AppAutoCompleteAsyc from '../lib/components/autocomplete/appAutoCompleteAsyc';\r\nimport * as EndpointContants from '../utils/ptmsEndpoints';\r\nimport AppButton from '../lib/components/buttons/appButton';\r\nimport * as Yup from 'yup';\r\nimport SelectBox from '../lib/components/select/selectBox';\r\n\r\n\r\nimport AssignTruckAndDriverService from '../service/AssignTruckAndDriverService';\r\nimport { NO_DIALOG } from '../lib/common/Constants';\r\nimport { OTHER_POPUP } from './../lib/common/Constants';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport TripConfirmPopUp from './TripConfirmPopUp';\r\n\r\n\r\n\r\nlet containersForm = {\r\n    vehicleRegistrationNo: '',\r\n    driverCode: '',\r\n    toTime:'0',\r\n    fromTime:'0'\r\n};\r\n\r\n\r\nconst validationSchema = Yup.object({\r\n    vehicleRegistrationNo: Yup.string().required('Vehicle Registration Number is Required')\r\n    \r\n});\r\nconst Container = (props) => {\r\n    const [formvalues, setFormvalues] = useState(containersForm);\r\n    const [showPopup, setShowPopup] = useState(NO_DIALOG);\r\n    const [tripData, setTripData] = useState();\r\n    const [savedState, setSavedState] = useState();\r\n\r\n\r\n    let history = useHistory();\r\n\r\n \r\n    let vehicleType = props.refVehicleType;\r\n\r\n    const truckKVmapping = { \"label\": \"label\", \"value\": \"value\" };\r\n    const truckUrl = `${EndpointContants.fetchTrucksForTransporter}/${vehicleType}`;\r\n\r\n\r\n    const driverKVmapping = { \"label\": \"label\", \"value\": \"value\" };\r\n    const driverUrl = `${EndpointContants.fetchDriversForTransporter}`;\r\n    let fmk;\r\n\r\n    const timeOptions = [\r\n        { \"label\": \"Select\", \"value\": \"0\" }, \r\n        { \"label\": \"1AM\", \"value\": \"1AM\" }, \r\n        { \"label\": \"2AM\", \"value\": \"2AM\" }, \r\n        { \"label\": \"3AM\", \"value\": \"3AM\" }, \r\n        { \"label\": \"4AM\", \"value\": \"4AM\" }, \r\n        { \"label\": \"5AM\", \"value\": \"5AM\" }, \r\n        { \"label\": \"6AM\", \"value\": \"6AM\" }, \r\n        { \"label\": \"7AM\", \"value\": \"7AM\" }, \r\n        { \"label\": \"8AM\", \"value\": \"8AM\" }, \r\n        { \"label\": \"9AM\", \"value\": \"9AM\" }, \r\n        { \"label\": \"10AM\", \"value\": \"10AM\" }, \r\n        { \"label\": \"11AM\", \"value\": \"11AM\" }, \r\n        { \"label\": \"12AM\", \"value\": \"12AM\" },\r\n        { \"label\": \"1PM\", \"value\": \"1PM\" }, \r\n        { \"label\": \"2PM\", \"value\": \"2PM\" }, \r\n        { \"label\": \"3PM\", \"value\": \"3PM\" }, \r\n        { \"label\": \"4PM\", \"value\": \"4PM\" }, \r\n        { \"label\": \"5PM\", \"value\": \"5PM\" }, \r\n        { \"label\": \"6PM\", \"value\": \"6PM\" }, \r\n        { \"label\": \"7PM\", \"value\": \"7PM\" }, \r\n        { \"label\": \"8PM\", \"value\": \"8PM\" }, \r\n        { \"label\": \"9PM\", \"value\": \"9PM\" }, \r\n        { \"label\": \"10PM\", \"value\": \"10PM\" }, \r\n        { \"label\": \"11PM\", \"value\": \"11PM\" }, \r\n        { \"label\": \"12PM\", \"value\": \"12PM\" }\r\n    ];\r\n\r\n\r\n\r\n\r\n    const onSubmit = values => {\r\n        console.log(\"values\", values);\r\n\r\n\r\n        let formData={container_number: props.containerData.container_number, vehicleRegistrationNumber: values.vehicleRegistrationNo,\r\n            dropTime:props.containerData.dropTimeFormatted,timeSlot:values.fromTime+'-'+values.toTime, transactionCode: props.orderId,isoCode:props.containerData.iso_code}\r\n\r\n         console.log(\"values form\", formData);\r\n            AssignTruckAndDriverService.checkForExistingTrip(formData)\r\n        .then(response => {\r\n        \r\n            if(response.data.dataItems[0].referenceNumber)\r\n            {\r\n             setTripData(response.data.dataItems[0]);\r\n             setShowPopup(OTHER_POPUP);\r\n            }\r\n            else{\r\n                saveFormData(\"NO\") ; \r\n            }\r\n           \r\n        })\r\n        .catch(error => {\r\n        });\r\n\r\n\r\n\r\n      \r\n    }\r\n\r\n    const saveFormData=(confirmation)=>{\r\n\r\n      \r\n        var  containers\r\n        if(confirmation==='NO')\r\n        {\r\n           let tripData=null;\r\n           containers = [{ container_number: props.containerData.container_number,requestBoeNumber:props.containerData.requestBoeNumber,vehicleRegistrationNumber: fmk.values.vehicleRegistrationNo,\r\n            driverCode: fmk.values.driverCode,dropTimeFormatted:props.containerData.dropTimeFormatted,timeSlot:fmk.values.fromTime+'-'+fmk.values.toTime,trip:tripData }];\r\n            \r\n        }\r\n         else if(confirmation==='YES'){\r\n         containers = [{ container_number: props.containerData.container_number,vehicleRegistrationNumber: fmk.values.vehicleRegistrationNo,\r\n                driverCode: fmk.values.driverCode,dropTimeFormatted:props.containerData.dropTimeFormatted,timeSlot:fmk.values.fromTime+'-'+fmk.values.toTime,trip:tripData }];\r\n\r\n         }\r\n        \r\n\r\n        let assignTruckForm = {  containerList:containers, referenceNumber: props.orderId };\r\n\r\n\r\n          AssignTruckAndDriverService.saveFormData(assignTruckForm)\r\n             .then(response => {\r\n                 console.log(\"Save Success\");\r\n                 setSavedState(response.data.dataItems[0]);\r\n\r\n             })\r\n             .catch(error => {\r\n             });\r\n\r\n\r\n\r\n        \r\n    }\r\n\r\n\r\n    const RenderTruckInfo=()=>{\r\n        \r\n\r\n        if(savedState)\r\n        {\r\n            console.log(\"render truck Name in saved\");\r\n            return <>\r\n            <LabelComponent labelType={1} label=\"Vehicle Registration Number\" value={savedState.trip.vehicleRegNo}></LabelComponent>\r\n          </> \r\n        }\r\n\r\n       else if(props.containerData.trip && props.containerData.trip.vehicleRegNo)\r\n        {\r\n            console.log(\"render truck Name if\");\r\n            return <>\r\n         <LabelComponent labelType={1} label=\"Vehicle Registration Number\" value={props.containerData.trip.vehicleRegNo}></LabelComponent>\r\n          </>\r\n          \r\n        }\r\n        else\r\n        {\r\n            console.log(\"render truck Name else\");\r\n            return <>\r\n            <AppAutoCompleteAsyc name={\"vehicleRegistrationNo\"} label=\"Vehicle Registration Number\"\r\n                                              kvMapping={truckKVmapping}\r\n                    remoteUrl={truckUrl}\r\n                    onSelect ={()=>{}}/>\r\n          </>\r\n        \r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst RenderDriverInfo=()=>{\r\n\r\n    if(savedState)\r\n        {\r\n            console.log(\"render driver name in saved\");\r\n            return <>\r\n            <LabelComponent labelType={1} label=\"DriverName\" value={savedState.trip.driverName}></LabelComponent>\r\n          </> \r\n        }\r\n\r\n\r\n    if(props.containerData.trip && props.containerData.trip.driverName)\r\n    {\r\n        console.log(\"render driver Name if\");\r\n        return <>\r\n        <LabelComponent labelType={1} label=\"DriverName\" value={props.containerData.trip.driverName}></LabelComponent>\r\n     </>\r\n      \r\n    }\r\n    else\r\n    {\r\n        console.log(\"render driver Name else\");\r\n        return <>\r\n        <AppAutoCompleteAsyc name={\"driverCode\"} label=\"Driver Code\"\r\n                                           kvMapping={driverKVmapping}\r\n                remoteUrl={driverUrl}\r\n                onSelect ={()=>{}}/>\r\n   </>\r\n   \r\n\r\n}\r\n\r\n}\r\n\r\n\r\nconst RenderTimeInfo=()=>{\r\n\r\n    if(savedState)\r\n    {\r\n        console.log(\"render driver name in saved\");\r\n        return <>\r\n        <LabelComponent labelType={1} label=\"DriverName\" value={savedState.timeSlot}></LabelComponent>\r\n      </> \r\n    }\r\n\r\n\r\n    if(props.containerData.timeSlot)\r\n    {\r\n        return <>\r\n        <LabelComponent labelType={1} label=\"Time Slot\" value={props.containerData.timeSlot}></LabelComponent>\r\n     </>\r\n    }\r\n    else\r\n    {\r\n        return <>\r\n        <SelectBox label={\"From Time\"} name={\"fromTime\"}\r\n        options={timeOptions} \r\n         />\r\n\r\n        <SelectBox label={\"To Time\"} name={\"toTime\"}\r\n        options={timeOptions}  />\r\n        </>\r\n    }\r\n\r\n\r\n    \r\n}\r\n\r\nconst RenderTripInfo=()=>{\r\n    if(savedState)\r\n    {\r\n        console.log(\"render trip in saved\");\r\n        return <>\r\n        <LabelComponent labelType={1} label=\"Trip Reference Number\" value={savedState.trip.referenceNumber}></LabelComponent>\r\n      </> \r\n    }\r\n    else if(props.containerData.trip)\r\n    {\r\n        return <>\r\n        <LabelComponent labelType={1} label=\"Trip Reference Number\" value={props.containerData.trip.referenceNumber}></LabelComponent>\r\n      </>  \r\n    }\r\n    return <></>\r\n        \r\n}\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Formik initialValues={formvalues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n                     enableReinitialize>\r\n            {\r\n                formik => {\r\n                    fmk = formik;\r\n                    return (\r\n                        <>\r\n                            <FormContainer>\r\n                                <Form autoComplete=\"off\">\r\n                                    <div className=\"row\">\r\n                                    <div className=\"col-md-3\">\r\n                                        <LabelComponent labelType={1} label=\"Request Boe Number\" value={props.containerData.requestBoeNumber}></LabelComponent>\r\n                                        </div>\r\n                                        <div className=\"col-md-3\">\r\n                                        <LabelComponent labelType={1} label=\"Container Number\" value={props.containerData.container_number}></LabelComponent>\r\n                                        </div>\r\n                                        <div className=\"col-md-3\">\r\n                                        <LabelComponent labelType={1} label=\"Consignee name\" value={props.containerData.consigneeName}></LabelComponent>\r\n                                        </div>\r\n                                        <div className=\"col-md-3\">\r\n                                        <LabelComponent labelType={1} label=\"Drop Time\" value={props.containerData.dropTimeFormatted}></LabelComponent>\r\n                                        </div>\r\n                                       \r\n                                        \r\n                                        \r\n                                \r\n                                       \r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-md-3\">\r\n                                        <LabelComponent labelType={1} label=\"ISO Code\" value={props.containerData.iso_code}></LabelComponent>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-3\">\r\n                                           <RenderTruckInfo/>\r\n                                           </div> \r\n                                    \r\n                                        <div className=\"col-md-3\">\r\n                                          <RenderDriverInfo/>\r\n                                        </div>\r\n                                        <div className=\"col-md-3\">\r\n                                        <RenderTimeInfo/> \r\n                                        </div>\r\n   \r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                    <div className=\"col-md-3\">\r\n                                        <RenderTripInfo/> \r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"button-holder\"  >\r\n                                    <div className=\"col\">\r\n\r\n\r\n                                    <AppButton text={\"Back\"} type={\"button\"}   handleClick={() => {\r\n                                                    history.push('/transporterTasks');\r\n                        \r\n                                                }}></AppButton>\r\n\r\n\r\n                                    {\r\n                                    (!(savedState||props.containerData.trip))?\r\n                                    (  \r\n                                    <AppButton  text={\"Submit\"} type={\"submit\"} icon=\"check\" ></AppButton>\r\n                                 ):(<p></p>)\r\n\r\n                                 \r\n                }\r\n                                 \r\n\r\n                                   \r\n\r\n                                    </div>\r\n\r\n                                    </div>\r\n\r\n                                   \r\n\r\n                                   \r\n                                   \r\n\r\n                                    <TripConfirmPopUp isopen={showPopup === OTHER_POPUP} tripData={tripData} onClose={(e) => {\r\n                                        saveFormData(e);\r\n                                        setShowPopup(NO_DIALOG);\r\n                                    }} onConfirm={(e) => {\r\n                                        saveFormData(e);\r\n                                        setShowPopup(NO_DIALOG);\r\n\r\n                                    \r\n                                    }} />\r\n\r\n                                \r\n\r\n\r\n                                </Form>\r\n                            </FormContainer>\r\n\r\n\r\n\r\n                        </>\r\n                    )\r\n                }\r\n            }\r\n\r\n        </Formik >\r\n    )\r\n\r\n}\r\n\r\nexport default Container;","import React from 'react';\r\nimport Container from './Container';\r\n\r\n\r\nconst ContainerDetails = [\r\n    {\r\n        containerNo: 'C001'\r\n    },\r\n    {\r\n        containerNo: 'C002'\r\n    },\r\n    {\r\n        containerNo:'C003'\r\n    }\r\n\r\n\r\n];\r\n\r\n\r\nconst ContainerTest = () => {\r\n\r\n    return (\r\n        <div className=\"col-md\">\r\n            {ContainerDetails.map(container => (\r\n                <Container containerNo={container.containerNo} key={container.containerNo}></Container>\r\n\r\n            ))}\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default ContainerTest;"],"sourceRoot":""}