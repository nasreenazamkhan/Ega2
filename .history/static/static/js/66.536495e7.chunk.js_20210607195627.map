{"version":3,"sources":["lib/components/dialog/alertDialog.js","lib/components/table/CollapseDataTable.tsx","components/transporter/TrucksAvailable.js"],"names":["React","memo","props","title","onClose","isopen","message","SpacedTable","withStyles","theme","createStyles","root","borderCollapse","borderSpacing","Table","InnerTableContainer","overflowY","width","height","paddingLeft","boxShadow","webkitBoxShadow","backgroundColor","borderRadius","MuiTableContainer","HeaderTableRow","selected","TableRow","CollapseTableRow","opacity","CollapseTableCell","head","paddingTop","paddingBottom","paddingRight","whiteSpace","color","fontWeight","fontSize","textAlign","borderBottom","body","TableCell","CollapeHolderCell","StyledTableCell","borderRight","borderLeft","borderTop","StyledRedTableCell","StyledBlueTableCell","getTableRow","dk","row","index","rd","key","datastr","eval","align","type","COLUMN_TYPE_STRING","getCollapseTableRow","CollapseDataTable","tableData","tableKeys","handleClick","actions","remote","remoteUrl","refresh","dataRootKey","chkbox","collapseChkBox","collapsableTableKeys","collapseTableList","keyTest","countData","onFilterSelected","selectedData","groupBy","useState","rowsPerPage","page","sortColumn","currentPageRows","currentPageKey","collapseTableKey","count","dtstate","setdtstate","errorMsg","alertOpen","setAlertOpen","loading","setLoading","reRender","setRerender","headerChecked","setHeaderChecked","anchorEl","setAnchorEl","handleImgClick","event","currentTarget","handleImgClose","popOverOpen","Boolean","id","undefined","useEffect","loadDatTable","updateAlertState","status","msg","setCurrentSortColumn","sortEle","filter","tk","sort","sortActive","prevState","getPageData","trim","loadHttp","markSelectedDataAsChecked","remoteData","compareList","reduce","objectsByRequest","obj","value","concat","container_number","Object","keys","forEach","item","boeIndex","elements","findIndex","x","referenceNumber","containerNumber","y","containerIndex","containerList","container","checked","noOfContainers","pageNumber","pageSize","fnUrl","pageNo","indexOf","getHttp","url","then","e","keyEle","console","log","totalElements","catch","error","handleSort","scol","dir","fnlUrl","getTableHeadRow","filterClicked","name","src","style","cursor","onClick","className","active","direction","open","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","border","borderColor","getCollapseTableHeadRow","currentPage","nextPage","slice","handleChangePage","newpage","handleChangeRowsPerPage","target","mapCollapseTableList","rk","keystr","map","ind","size","evnt","CollapseRow","extIndex","openCollapsePanel","setOpen","allChecked","setAllChecked","headerRowLeftBorder","setHeaderRowLeftBorder","length","act","tip","placement","arrow","padding","icon1","colSpan","in","timeout","unmountOnExit","maxHeight","stickyHeader","rowsPerPageOptions","component","backIconButtonProps","onChangePage","nextIconButtonProps","onChangeRowsPerPage","elevation","marginTop","minWidth","minHeight","spacing","sm","xs","variant","truckDetailsCol","pstate"],"mappings":"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","file":"static/js/66.536495e7.chunk.js","sourcesContent":["import React from 'react'\r\nimport { AppDialog } from './dialogBox'\r\n\r\nfunction AlertDialog(props) {\r\n    return (\r\n        <div>\r\n            <AppDialog title=\"Alert\" onClose={props.onClose} isopen={props.isopen}>\r\n                {props.message}\r\n            </AppDialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(AlertDialog);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, withStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { IconButton, Icon, TablePagination, TableSortLabel, TextField, Tooltip, CircularProgress,Checkbox,Grid,\r\n    Typography} from '@material-ui/core';\r\nimport { TableProps } from './tableProps';\r\nimport { COLUMN_TYPE_STRING } from '../../common/Constants';\r\nimport AlertDialog from '../dialog/alertDialog';\r\nimport { getHttp } from '../../common/HttpService';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport MuiTableContainer from \"@material-ui/core/TableContainer\";\r\nimport { BorderBottom, BorderLeftOutlined } from '@material-ui/icons';\r\n\r\nconst SpacedTable= withStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t    root: {\r\n\t        borderCollapse: 'separate',\r\n\t        borderSpacing: '0 9px', \r\n\t    }\r\n\t}\r\n)\r\n)(Table);\r\n\r\nconst InnerTableContainer = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            overflowY: \"scroll\",\r\n            \"&::-webkit-scrollbar\": {\r\n              width: \"5px\",\r\n              height: \"10px\",\r\n              paddingLeft:\"20px\",\r\n            },\r\n            \"&::-webkit-scrollbar-track\": {\r\n              boxShadow: \"inset 0 0 2px rgba(0,0,0,0.00)\",\r\n              webkitBoxShadow: \"inset 0 0 2px rgba(0,0,0,0.00)\",\r\n            \r\n            },\r\n            \"&::-webkit-scrollbar-thumb\": {\r\n              backgroundColor: \"#787878\",\r\n              borderRadius: 2,\r\n            },\r\n          },\r\n    })\r\n)(MuiTableContainer);\r\n// const StyledCollapse = withStyles((theme: Theme) =>\r\n//     createStyles({\r\n//         container: {\r\n//         }\r\n//     })\r\n// )(Collapse);\r\n\r\nconst HeaderTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&:hover':{\r\n                backgroundColor: '#F9F9F9'\r\n            }\r\n        },\r\n        selected:{\r\n            boxShadow: '4px 4px 7px #0000002B',\r\n            backgroundColor: '#F9F9F9 !important',\r\n        }\r\n    })\r\n)(TableRow);\r\n\r\nconst CollapseTableRow = withStyles(theme => ({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: '#F9F9F9',\r\n        opacity: '1'\r\n      }\r\n    }\r\n  }))(TableRow);\r\n\r\nconst CollapseTableCell = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        head: {\r\n            paddingTop: 0,\r\n            paddingBottom: 0,\r\n            \"&:$last-child\": { paddingRight: '25px' },\r\n            \"&:$first-child\": { paddingLeft: '25px'},\r\n            whiteSpace: 'nowrap',\r\n            color: '#848484',\r\n            fontWeight: 'bold',\r\n            fontSize: \"14px\",\r\n            textAlign: 'left',\r\n            borderBottom: '1px solid #F0F0F0',\r\n\t\t\topacity: '1',\r\n            height: '43px'\r\n        },\r\n        body: {\r\n            paddingTop: 0,\r\n            paddingBottom: 0,\r\n            \"&:$last-child\": { paddingRight: '25px'},\r\n            \"&:$first-child\": { paddingLeft: '25px' },\r\n            whiteSpace: 'nowrap',\r\n            fontSize: \"14px\",\r\n            color: '#848484',\r\n            textAlign: 'left',\r\n            borderBottom: '0px',\r\n            height: '43px',\r\n\r\n    }}),\r\n)(TableCell);\r\n\r\nconst CollapeHolderCell = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            paddingTop: 0,\r\n            paddingBottom: 0\r\n        }\r\n    })\r\n)(TableCell);\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        head: {\r\n            paddingTop: 0,\r\n            paddingBottom: 0,\r\n            color: '#808080',\r\n            height: '64px'\r\n        },\r\n        body: {\r\n            paddingTop: 0,\r\n            paddingBottom: 0,\r\n            height: '64px',\r\n           // \"&:$selected\": { borderLeft:'1px  solid #FF0000'},   \r\n           \"&:$last-child\": { borderRight: '1px solid #E8E8E8'},\r\n            \"&:$first-child\": { borderLeft: '1px solid #E8E8E8' },\r\n            whiteSpace: 'nowrap',\r\n            fontSize: '16px',\r\n            color: '#808080',\r\n            borderBottom: '1px solid #E8E8E8',\r\n            borderTop: '1px solid #E8E8E8'\r\n        },\r\n    }),\r\n)(TableCell);\r\n\r\nconst StyledRedTableCell = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        head: {\r\n            color: '#808080',\r\n        },\r\n        body: {\r\n            whiteSpace: 'nowrap',\r\n            fontSize:'16px',\r\n            color: 'red',\r\n            fontWeight:\"bold\",\r\n            borderBottom: '1px solid #E8E8E8',\r\n            borderTop: '1px solid #E8E8E8'\r\n        },\r\n    }),\r\n)(TableCell);\r\n\r\n\r\n\r\nconst StyledBlueTableCell = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        head: {\r\n            color: '#808080',\r\n        },\r\n        body: {\r\n            whiteSpace: 'nowrap',\r\n            fontSize: '16px',\r\n            color: '#2E8BE9',\r\n            fontWeight:\"bold\",\r\n            borderBottom: '1px solid #E8E8E8',\r\n            borderTop: '1px solid #E8E8E8'\r\n        }\r\n    }),\r\n)(TableCell);\r\n\r\nconst getTableRow = ({ dk, row, index }: any) => {\r\n    let rd = 'row.' + dk.key;\r\n    let datastr = eval(rd);\r\n    if(dk.key==='status' && datastr==='Expired')\r\n    {\r\n        return (<StyledRedTableCell key={index} align=\"left\" >{datastr}</StyledRedTableCell>) \r\n    }\r\n    if(dk.key==='status' && datastr==='Active')\r\n    {\r\n        return (<StyledBlueTableCell key={index} align=\"left\" >{datastr}</StyledBlueTableCell>) \r\n    }\r\n    else if (dk.type === COLUMN_TYPE_STRING)\r\n        return (<StyledTableCell key={index} align=\"left\">{datastr}</StyledTableCell>)\r\n    else\r\n        return (<StyledTableCell align=\"left\" key={index}>{datastr}</StyledTableCell>)\r\n}\r\n\r\n\r\nconst getCollapseTableRow = ({ dk, row, index }: any) => {\r\n    let rd = 'row.' + dk.key;\r\n    let datastr = eval(rd);\r\n    return (<CollapseTableCell key={index} align=\"left\">{datastr}</CollapseTableCell>)\r\n}\r\n\r\nconst CollapseDataTable : React.FC<TableProps> = ({ tableData, tableKeys, handleClick, actions = [], remote, remoteUrl, refresh, dataRootKey,chkbox=false,collapseChkBox=false,collapsableTableKeys=[],\r\n    collapseTableList,keyTest,countData,onFilterSelected,selectedData,groupBy}) => {\r\n\r\n    const [dtstate, setdtstate] = useState({ rowsPerPage: 10, page: 0, sortColumn: null, currentPageRows: [], currentPageKey: [],collapseTableKey:[],count: 0 });\r\n    const [alertOpen, setAlertOpen] = useState({ isopen: false, errorMsg: \"\" });\r\n    const [loading, setLoading] = useState(false);\r\n    const [reRender,setRerender]=useState(0);\r\n    const [headerChecked,setHeaderChecked]=useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    \r\n\r\n    const handleImgClick = (event:any) => {\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n  \r\n    const handleImgClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n  \r\n    const popOverOpen = Boolean(anchorEl);\r\n    const id = popOverOpen ? 'simple-popover' : undefined;\r\n   \r\n    useEffect(() => {\r\n        loadDatTable();\r\n    }, []);\r\n\r\n    \r\n    useEffect(() => {\r\n        loadDatTable();\r\n    }, [refresh]);\r\n \r\n\r\n    const updateAlertState = (status: boolean, msg: string) => {\r\n        setAlertOpen({\r\n            isopen: status,\r\n            errorMsg: msg\r\n        })\r\n    }\r\n\r\n    const setCurrentSortColumn = () => {\r\n        let sortEle = tableKeys.filter((tk) => {\r\n            return (tk.sort === true && tk.sortActive === true)\r\n        })\r\n        setdtstate((prevState) => ({\r\n            ...prevState,\r\n            sortColumn: sortEle[0]\r\n        }));\r\n    }\r\n\r\n    const loadDatTable = () => {\r\n        setCurrentSortColumn();\r\n        if (remote !== true) {\r\n            setdtstate((prevState) => ({\r\n                ...prevState,\r\n                currentPageKey: tableKeys,\r\n                refresh: refresh,\r\n                page: 0,\r\n                rowsPerPage: 10,\r\n                currentPageRows: getPageData(0, 1, 10),\r\n                collapseTableKey:collapsableTableKeys,\r\n            }));\r\n        } else {\r\n            if (remoteUrl === '' || remoteUrl.trim() === '')\r\n                return;\r\n            loadHttp(remoteUrl,0);\r\n        }\r\n\r\n    }\r\n\r\n    const markSelectedDataAsChecked=(remoteData:any)=>\r\n    {\r\n        const compareList=selectedData.reduce((objectsByRequest:any, obj:any) => {\r\n            const value = obj[groupBy];\r\n            objectsByRequest[value] = (objectsByRequest[value] || []).concat(obj.container_number);\r\n            return objectsByRequest;\r\n        }, {});\r\n        Object.keys(compareList).forEach((item) => {\r\n            var boeIndex= remoteData.elements.findIndex((x:any)=>x.referenceNumber===item);\r\n            if(boeIndex!==-1){\r\n                var containerNumber=0;\r\n                compareList[item].forEach((y:any)=>{\r\n                var containerIndex= remoteData.elements[boeIndex].containerList.findIndex((container:any)=>container.container_number===y);\r\n                if(containerIndex!==-1){\r\n                    containerNumber=containerNumber+1;\r\n                    remoteData.elements[boeIndex].containerList[containerIndex].checked=true;\r\n                }\r\n                if(containerNumber=== remoteData.elements[boeIndex].noOfContainers)\r\n                    remoteData.elements[boeIndex].checked=true; \r\n                });  \r\n            }\r\n        });\r\n    }\r\n\r\n    const loadHttp = (remoteUrl: any, pageNumber?:number ,pageSize = dtstate.rowsPerPage) => {\r\n        setLoading(true);\r\n        let fnUrl = '';\r\n        let pageNo=pageNumber;\r\n        if (remoteUrl.('?') === -1) {\r\n            fnUrl = remoteUrl + '?pgNo=' + pageNo + '&pgSize=' + pageSize;\r\n        } else {\r\n            fnUrl = remoteUrl + '&pgNo=' + pageNo + '&pgSize=' + pageSize;\r\n        }\r\n        getHttp({ url: fnUrl }, false).then(e => {\r\n            let remoteData = e;\r\n            if(selectedData)\r\n                markSelectedDataAsChecked(remoteData)\r\n            countData(remoteData.count);\r\n            if (dataRootKey && dataRootKey !== '') {\r\n                let keyEle = 'e.' + dataRootKey;\r\n                remoteData = eval(keyEle);\r\n                console.log(remoteData);\r\n            }\r\n            setdtstate((prevState) => ({\r\n                ...prevState,\r\n                currentPageKey: tableKeys,\r\n                refresh: refresh,\r\n                page: pageNo,\r\n                rowsPerPage: 10,\r\n                currentPageRows: remoteData,\r\n                collapseTableKey:collapsableTableKeys,\r\n                count: e.totalElements\r\n                \r\n            }));\r\n            setLoading(false);\r\n        }).catch(error => {\r\n            updateAlertState(true, error);\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    const handleSort = (scol: any) => {\r\n        if (scol.id === dtstate.sortColumn.id) {\r\n            if (scol.dir === 'asc')\r\n                scol.dir = 'desc';\r\n            else\r\n                scol.dir = 'asc';\r\n        } else {\r\n            scol.dir = 'asc';\r\n        }\r\n        let fnlUrl = null;\r\n        if (remoteUrl.indexOf('?') === -1)\r\n            fnlUrl = remoteUrl + '?sortCol=' + scol.id + '&sortOrder=' + scol.dir;\r\n        else\r\n            fnlUrl = remoteUrl + '&sortCol=' + scol.id + '&sortOrder=' + scol.dir;\r\n\r\n        loadHttp(fnlUrl, 1, 10);\r\n    }\r\n\r\n    const getTableHeadRow = ({ dk, index }: any) => {\r\n        const filterClicked=(e:any)=>\r\n        {\r\n            onFilterSelected(e);\r\n            handleImgClose();\r\n        }\r\n        return (\r\n            <>\r\n            <StyledTableCell key={index} align=\"left\">{dk.name}\r\n                {dk.name==='Status' && <img src=\"./filter.svg\" style={{cursor:\"pointer\"}} onClick={handleImgClick}/>}\r\n                {dk.sort === true &&\r\n                    <TableSortLabel key={index + 1} className=\"table-sort-icon\"\r\n                        active={dtstate.sortColumn.id === dk.id}\r\n                        direction={dtstate.sortColumn.id === dk.id ? dtstate.sortColumn.dir : 'asc'}\r\n                        onClick={() => {handleSort(dk);}}\r\n                />}\r\n            </StyledTableCell>\r\n            <Popover style={{ width: '300px', height: '200px'}}\r\n                id={id}\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleImgClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center'}}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center'}}\r\n                PaperProps={{\r\n                    style: { width: '100px',height:'70px',boxShadow:'none', border: '1px solid',borderColor:'#CCCCCC' },\r\n                }}\r\n            >\r\n                <div>{\" \"}</div>\r\n                <div  style= {{ fontSize:'15px',fontWeight:'bold',color:'#C62926',textAlign:'center',cursor: 'pointer'}} onClick={()=>filterClicked('Expired')}>Expired</div>\r\n                <div style= {{ fontSize:'15px',fontWeight:'bold',color:'#2E8BE9',textAlign:'center',cursor: 'pointer' }} onClick={()=>filterClicked('Active')}>Active</div>\r\n            </Popover>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    const getCollapseTableHeadRow = ({ dk, index }: any) => {\r\n        return (\r\n            <CollapseTableCell key={index} align=\"left\">{dk.name}\r\n            </CollapseTableCell>\r\n\r\n        )\r\n    }\r\n\r\n    const getPageData = (currentPage: number, nextPage: number, rowsPerPage: number) => {\r\n        return (tableData.slice((currentPage) * rowsPerPage, (nextPage) * rowsPerPage));\r\n\r\n    }\r\n\r\n    const handleChangePage = (event: any, newpage: number) => {\r\n        if (remote !== true) {\r\n            setdtstate((prevState) => ({\r\n                ...prevState,\r\n                page: newpage,\r\n                currentPageRows: getPageData(newpage, newpage + 1, dtstate.rowsPerPage)\r\n            }));\r\n        } else {\r\n            setdtstate((prevState) => ({\r\n                ...prevState,\r\n                page: newpage\r\n            }));\r\n            loadHttp(remoteUrl, newpage);\r\n        }\r\n    }\r\n\r\n    const handleChangeRowsPerPage = (event: any) => {\r\n        if (remote !== true) {\r\n            setdtstate((prevState) => ({\r\n                ...prevState,\r\n                refresh: refresh,\r\n                page: 0,\r\n                rowsPerPage: event.target.value,\r\n                currentPageRows: getPageData(0, 10, event.target.value)\r\n            }));\r\n        } else {\r\n            let fnlUrl = remoteUrl + '?pageNo=1&pageSize=' + event.target.value;\r\n            loadHttp(fnlUrl);\r\n        }\r\n    }\r\n\r\n    const mapCollapseTableList= (row:any) => {\r\n        let rd = 'row.' + collapseTableList ;\r\n        let rk = 'row.' + keyTest ;\r\n        let datastr = eval(rd);\r\n        let keystr = eval(rk);\r\n        return(\r\n        datastr.map((row:any,ind:any) =>(/**style ={ ind % 2? { background : \"#F9F9F9\" }:{ background : \"#FFFFFF\" }} */\r\n            <CollapseTableRow >\r\n                <CollapseTableCell style={{width:'27px', paddingRight:'0px'}}>   \r\n                    { collapseChkBox  &&     \r\n                    <Checkbox size='small' checked={row.checked} onClick={(evnt: any) => {\r\n                                                            row.checked=!row.checked;\r\n                                                            setRerender(reRender+1);\r\n                                                            handleClick(row, \"\",'collapseRowChecked', evnt);\r\n                                                          }} />}\r\n                </CollapseTableCell>\r\n                {dtstate.collapseTableKey.map((dk) => (getCollapseTableRow({ dk, row, keystr })))}\r\n          </CollapseTableRow>\r\n            )\r\n        ))\r\n    }\r\n\r\n    function CollapseRow({ row, extIndex }: any) {\r\n        const [open, setOpen] = React.useState(row.openCollapsePanel);\r\n        const [allChecked, setAllChecked] = React.useState(false);\r\n        const [headerRowLeftBorder,setHeaderRowLeftBorder]=useState('1px solid #E8E8E8');\r\n    \r\n        return (\r\n        <>\r\n            <HeaderTableRow key={extIndex}  selected={open}>\r\n                {chkbox === true ?\r\n                    <StyledTableCell style={{width:'27px', paddingRight:'0px', borderLeft:headerRowLeftBorder}}>\r\n                        <Checkbox checked={row.checked} onClick={(evnt: any) => {\r\n                                                            row.checked=!row.checked;\r\n                                                            let rd = 'row.' + collapseTableList ;\r\n                                                            let datastr = eval(rd);\r\n                                                            datastr.forEach(function (item:any) {\r\n    \r\n                                                                item.checked=row.checked\r\n                                                            })\r\n                                                            setRerender(reRender+1);\r\n                                                            handleClick(row, extIndex, 'collapseRowHeaderChecked', evnt);\r\n                                                        \r\n                                                            }} />\r\n                    </StyledTableCell>\r\n                    : null}\r\n                {dtstate.currentPageKey.map(\r\n                    (dk, index) => (getTableRow({ dk, row, index })))}\r\n                {actions.length > 0 ?\r\n                    <StyledTableCell align=\"right\" style={{ width: '120px' }}>\r\n                        {\r\n                            actions.map((act, x) => (\r\n                                <Tooltip key={x} title={act.tip} placement=\"top\" arrow>\r\n                                    <IconButton key={x} style={{ padding: \"0px\" }}\r\n                                    onClick={() => { \r\n                                                row.openCollapsePanel=!row.openCollapsePanel\r\n                                                setOpen( row.openCollapsePanel);\r\n                                        }\r\n                                    }>\r\n                                        {!row.openCollapsePanel && <img src=\"./plus.svg\" />}\r\n                                        {row.openCollapsePanel && <Icon style={{ color: act.color }}>{act.icon1}</Icon>}\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            ))\r\n                        }\r\n                    </StyledTableCell>\r\n                    : null}\r\n            </HeaderTableRow>\r\n            <TableRow>\r\n                { open && /**StyledTableCell */\r\n                <CollapeHolderCell colSpan={7}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <InnerTableContainer style={{ maxHeight: 200 }}>\r\n                            <Table stickyHeader size=\"small\" >\r\n                                <TableHead>\r\n                                    <TableRow >\r\n                                        <CollapseTableCell></CollapseTableCell>\r\n                                        {dtstate.collapseTableKey.map((dk, index) =>{ \r\n                                            return getCollapseTableHeadRow({ dk, index })\r\n                                        })} \r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {mapCollapseTableList(row)}\r\n                                </TableBody> \r\n                            </Table>\r\n                        </InnerTableContainer>\r\n                    </Collapse>\r\n                </CollapeHolderCell>}\r\n            </TableRow> \r\n        </> \r\n        )\r\n    }\r\n    return (\r\n        <>\r\n        <AlertDialog isopen={alertOpen.isopen} message={alertOpen.errorMsg} onClose={(e: any) => {updateAlertState(false, '');}} />\r\n            {loading || (dtstate.currentPageRows && dtstate.currentPageRows.length > 0) ?\r\n                <div>\r\n                    {loading && <CircularProgress className=\"dtable-loader\" />} \r\n                    {loading && <div></div>}\r\n                        <TableContainer >\r\n                            <SpacedTable>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        {chkbox === true ?\r\n                                            <StyledTableCell style={{width:'27px', paddingRight:'0px'}}>\r\n                                            <Checkbox  checked={headerChecked}\r\n                                                                onClick={(evnt: any) => {\r\n                                                                console.log(dtstate.currentPageRows);\r\n                                                                setHeaderChecked(!headerChecked);\r\n                                                                dtstate.currentPageRows.forEach(function (item:any) {\r\n                                                                    item.checked=!headerChecked;\r\n                                                                    \r\n                                                                    let rd = 'item.' + collapseTableList ;\r\n                                                                    let datastr = eval(rd);\r\n                                                                    datastr.forEach(function (row:any) {\r\n        \r\n                                                                        row.checked=!headerChecked;\r\n                                                                    })\r\n                                                                })\r\n                                                                handleClick(dtstate.currentPageRows, \"\",'collapseHeaderChecked', !headerChecked);\r\n                                                            }}\r\n                                                /> \r\n                                            </StyledTableCell>\r\n                                            : null\r\n                                        }\r\n                                        {dtstate.currentPageKey.map((dk: any, index) => (\r\n                                            getTableHeadRow({ dk, index })\r\n                                        ))}\r\n                                        {actions.length > 0 ?\r\n                                            <TableCell style={{ width: '120px' }}></TableCell>\r\n                                            : null\r\n                                        }\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {dtstate.currentPageRows.map((row, extIndex) => (\r\n                                       <CollapseRow key={extIndex} row={row} extIndex={extIndex} />\r\n                                    ))}\r\n                                </TableBody>\r\n                           </SpacedTable>\r\n                        </TableContainer>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[]}\r\n                            colSpan={3}\r\n                            component=\"div\"\r\n                            count={dtstate.count}\r\n                            rowsPerPage={dtstate.rowsPerPage}\r\n                            page={dtstate.page}\r\n                            backIconButtonProps={{ id: 'backId' }}\r\n                            onChangePage={handleChangePage}\r\n                            nextIconButtonProps={{ id: 'nextId' }}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        />\r\n                </div>\r\n                :    \r\n                (<Paper elevation={5} style={{ borderRadius: 8, padding: '30px', marginTop: 20, minWidth: '760px', minHeight: '100px', color: '#FF7171' }}>\r\n                    <Grid container direction=\"row\" spacing={5}>\r\n                        <Grid item sm={12} xs={12}>\r\n                            <Typography variant=\"subtitle1\" style={{ fontSize: '16px', textAlign: 'center' }}>\r\n                            <b>{'No records found'}</b></Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>)\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default React.memo(CollapseDataTable);","import React, { useEffect, useState } from \"react\";\r\nimport { InputLabel ,Table,TableBody,TableHead,TableRow,Paper} from \"@material-ui/core\";\r\nimport MuiTableCell from \"@material-ui/core/TableCell\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport CollapseDataTable from \"../../lib/components/table/CollapseDataTable\";\r\nimport {\r\n    COLUMN_TYPE_STRING\r\n  } from \"../../lib/common/Constants\";\r\n\r\nconst truckDetailsCol = [\r\n    {\r\n      name: \"Truck Number\",\r\n      type: COLUMN_TYPE_STRING,\r\n      key: \"truckNo\",\r\n      id: 1,\r\n    },\r\n    {\r\n      name: \"Plate Category\",\r\n      type: COLUMN_TYPE_STRING,\r\n      key: \"plateCategory\",\r\n      id: 1,\r\n    },\r\n    {\r\n      name: \"Plate Code\",\r\n      type: COLUMN_TYPE_STRING,\r\n      key: \"plateCode\",\r\n      id: 1,\r\n    },\r\n    {\r\n      name: \"Traffic File No\",\r\n      type: COLUMN_TYPE_STRING,\r\n      key: \"trafficFileNo\",\r\n      id: 1,\r\n    },\r\n    {\r\n      name: \"Passive RFID\",\r\n      type: COLUMN_TYPE_STRING,\r\n      key: \"passiveRFID\",\r\n      id: 1,\r\n  },\r\n  {\r\n    name: \"City Code\",\r\n    type: COLUMN_TYPE_STRING,\r\n    key: \"regPlace\",\r\n    id: 1,\r\n  },\r\n    {\r\n      name: \"Remarks\",\r\n      type: COLUMN_TYPE_STRING,\r\n      key: \"remarks\",\r\n      id: 1,\r\n  },\r\n \r\n\r\n]\r\n\r\nlet truckDetailsUrl = \"/ptms/app/api/secure/transporter/fetchTruckTabularData\";\r\n   \r\n\r\n\r\n\r\n function TrucksAvailable() {\r\n    const [pstate, setPstate] = useState(0);\r\n    return (\r\n        <> \r\n          <InputLabel style={{ fontSize: \"25px\",color:\"red\",marginTop:\"15px\"}}>Trucks Available</InputLabel>\r\n       <div className=\"row\">\r\n        <div className=\"col\">\r\n          <CollapseDataTable\r\n            refresh={pstate}\r\n            tableKeys={truckDetailsCol}\r\n            remote={true}\r\n            remoteUrl={truckDetailsUrl}\r\n            dataRootKey={\"elements\"}\r\n            chkbox={false}\r\n            collapseChkBox={false}\r\n            countData={(e)=>{}}\r\n           \r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n    \r\n    )\r\n\r\n }\r\n\r\n export default React.memo(TrucksAvailable)"],"sourceRoot":""}